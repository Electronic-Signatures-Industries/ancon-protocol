syntax = "proto3";
package ElectronicSignaturesIndustries.anconprotocol.anconprotocol;

import "cosmos/base/query/v1beta1/pagination.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "anconprotocol/htlc.proto";
import "anconprotocol/nft.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/Electronic-Signatures-Industries/ancon-protocol/x/anconprotocol/types";

// Query defines the gRPC querier service.
service Query {


	// Queries a list of resource items.
	rpc ReadWithPath(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/{cid}/{path}";
	}

	//additional handler that uses ReadFile
	// Queries a list of resource items.
	rpc ReadFile(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/file/{cid}/{path}";
	}
  
	// Queries a list of resource items.
	rpc Read(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/{cid}";
	}

   // HTLC queries the HTLC by the specified hash lock
   rpc GetHtlc(QueryHTLCRequest) returns (QueryHTLCResponse) {
	option (google.api.http).get = "/ancon/htlc/htlcs/{id}";
   }

	// AssetSupply queries the supply of an asset
	rpc AssetSupply(QueryAssetSupplyRequest) returns (QueryAssetSupplyResponse) {
		option (google.api.http).get = "/ancon/htlc/supplies/{denom}";
	}

	// AssetSupplies queries the supplies of all assets
	rpc AssetSupplies(QueryAssetSuppliesRequest) returns (QueryAssetSuppliesResponse) {
		option (google.api.http).get = "/ancon/htlc/supplies";
	}

	// Params queries the htlc parameters
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/ancon/htlc/params";
	}
	// this line is used by starport scaffolding # 2

	// Queries a list of resource items.
	rpc Resource(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/Electronic-Signatures-Industries/anconprotocol/anconprotocol/resource/{cid}";
	}
  // Supply queries the total supply of a given denom or owner
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
	option (google.api.http).get = "/irismod/nft/collections/{denom_id}/supply";
}

// Owner queries the NFTs of the specified owner
rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
	option (google.api.http).get = "/irismod/nft/nfts";
}

// Collection queries the NFTs of the specified denom
rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
	option (google.api.http).get = "/irismod/nft/collections/{denom_id}";
}

// Denom queries the definition of a given denom
rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
	option (google.api.http).get = "/irismod/nft/denoms/{denom_id}";
}

// Denoms queries all the denoms
rpc Denoms(QueryDenomsRequest) returns (QueryDenomsResponse) {
	option (google.api.http).get = "/irismod/nft/denoms";
}

// NFT queries the NFT for the given denom and token ID
rpc GetNft(QueryNFTRequest) returns (QueryNFTResponse) {
	option (google.api.http).get = "/irismod/nft/nfts/{denom_id}/{token_id}";
}
}

// QuerySupplyRequest is the request type for the Query/HTLC RPC method
message QuerySupplyRequest {
string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
uint64 amount = 1;
}

// QueryOwnerRequest is the request type for the Query/Owner RPC method
message QueryOwnerRequest {
string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
// pagination defines an optional pagination for the request.
cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryOwnerResponse is the response type for the Query/Owner RPC method
message QueryOwnerResponse {
Owner owner = 1;
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryCollectionRequest is the request type for the Query/Collection RPC method
message QueryCollectionRequest {
string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
// pagination defines an optional pagination for the request.
cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryCollectionResponse is the response type for the Query/Collection RPC method
message QueryCollectionResponse {
Collection collection = 1;
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDenomRequest is the request type for the Query/Denom RPC method
message QueryDenomRequest {
string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
}

// QueryDenomResponse is the response type for the Query/Denom RPC method
message QueryDenomResponse {
Denom denom = 1;
}

// QueryDenomsRequest is the request type for the Query/Denoms RPC method
message QueryDenomsRequest {
// pagination defines an optional pagination for the request.
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDenomsResponse is the response type for the Query/Denoms RPC method
message QueryDenomsResponse {
repeated Denom denoms = 1 [ (gogoproto.nullable) = false ];

cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryNFTRequest is the request type for the Query/NFT RPC method
message QueryNFTRequest {
string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
string token_id = 2 [ (gogoproto.moretags) = "yaml:\"token_id\"" ];
}

// QueryNFTResponse is the response type for the Query/NFT RPC method
message QueryNFTResponse {
BaseNFT nft = 1 [ (gogoproto.customname) = "NFT" ];
}
// this line is used by starport scaffolding # 3
message QueryResourceRequest {
  string cid = 1;
  string path = 2;
}

message QueryResourceResponse {
  string data = 1;
}



// QueryHTLCRequest is the request type for the Query/HTLC RPC method
message QueryHTLCRequest {
    string id = 1;
}

// QueryBalanceResponse is the response type for the Query/HTLC RPC method
message QueryHTLCResponse {
    HTLC htlc = 1;
}

// QueryAssetSupplyRequest is request type for the Query/AssetSupply RPC method
message QueryAssetSupplyRequest {
    string denom = 1;
}

// QueryAssetSupplyResponse is response type for the Query/AssetSupply RPC method
message QueryAssetSupplyResponse {
    AssetSupply asset_supply = 1 [ (gogoproto.moretags) = "yaml:\"asset_supply\"" ];
}

// QueryAssetSuppliesRequest is request type for the Query/AssetSupplies RPC method
message QueryAssetSuppliesRequest {
}

// QueryAssetSuppliesResponse is response type for the Query/AssetSupplies RPC method
message QueryAssetSuppliesResponse {
    repeated AssetSupply asset_supplies = 1 [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"asset_supplies\"" ];
}

// QueryParamsRequest is request type for the Query/Parameters RPC method
message QueryParamsRequest {
}

// QueryParamsResponse is response type for the Query/Parameters RPC method
message QueryParamsResponse {
    Params params = 1 [ (gogoproto.nullable) = false ];
}