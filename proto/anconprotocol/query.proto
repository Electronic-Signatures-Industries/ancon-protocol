syntax = "proto3";
package ElectronicSignaturesIndustries.anconprotocol.anconprotocol;


import "gogoproto/gogo.proto";


import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/Electronic-Signatures-Industries/ancon-protocol/x/anconprotocol/types";

// Query defines the gRPC querier service.
service Query {


	// Queries a list of resource items.
	rpc ReadWithPath(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/{cid}/{path}";
	}

	//additional handler that uses ReadFile
	// Queries a list of resource items.
	rpc ReadFile(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/file/{cid}/{path}";
	}
  
	// Queries a list of resource items.
	rpc Read(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/{cid}";
	}
	// this line is used by starport scaffolding # 2

	// Queries a list of owners items.
	rpc IdentifyOwner(QueryIdentifyOwnerRequest) returns (QueryIdentifyOwnerResponse) {
		option (google.api.http).get = "/ancon/didregistry/{address}";
	}
	// Queries a list of Attributes items.
	rpc GetAttributes(QueryGetAttributesRequest) returns (QueryGetAttributesResponse) {
		option (google.api.http).get = "/ancon/didregistry/{address}/attributes";
	}

	// Queries a list of resource items.
	rpc Resource(QueryResourceRequest) returns (QueryResourceResponse) {
		option (google.api.http).get = "/ancon/resource/{cid}";
	}

	// Queries a list of delegates items.
	rpc ReadDelegate(QueryGetDelegateRequest) returns (QueryGetDelegateResponse) {
		option (google.api.http).get = "/ancon/didregistry/delegates/{id}";
	}

}
// this line is used by starport scaffolding # 3

message QueryGetDelegateRequest {
	string id = 1;
	
}

message QueryGetDelegateResponse {
}

message QueryNonceRequest {
  string id = 1;
}

message QueryNonceResponse {
}

message QueryGetAttributesResponse {

}

message QueryIdentifyOwnerResponse{
	
}
message QueryGetAttributesRequest {
	string address = 1;
}

message QueryIdentifyOwnerRequest {
	string address = 1;
}
message QueryOwnersResponse {
}

message QueryResourceRequest {
  string cid = 1;
  string path = 2;
}

message QueryResourceResponse {
  string data = 1;
}

