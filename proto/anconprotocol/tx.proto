syntax = "proto3";
package ElectronicSignaturesIndustries.anconprotocol.anconprotocol;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Electronic-Signatures-Industries/ancon-protocol/x/anconprotocol/types";

// Msg defines the Msg service.
service Msg {
  // CreateDid
  rpc CreateDid(MsgCreateDid) returns (MsgCreateDidResponse);
  // UpdateDid
  rpc UpdateDid(MsgUpdateDid) returns (MsgUpdateDidResponse);
  // RevokeDid
  rpc RevokeDid(MsgRevokeDid) returns (MsgRevokeDidResponse);    
  // RoyaltyInfo defines a metadata CID royalty info
  rpc RoyaltyInfo(MsgRoyaltyInfo) returns (MsgRoyaltyInfoResponse);
  // ChangeOwer TODO
  rpc ChangeOwner(MsgChangeOwner) returns (MsgChangeOwnerResponse);
//  rpc ValidDelegate(MsgValidDelegate) returns (MsgValidDelegateResponse);
  // RevokeDelegate TODO
  rpc RevokeDelegate(MsgRevokeDelegate) returns (MsgRevokeDelegateResponse);
    // GrantDelegate TODO
  rpc GrantDelegate(MsgGrantDelegate) returns (MsgGrantDelegateResponse);
    // GrantAttribute TODO
  rpc GrantAttribute(MsgGrantAttribute) returns (MsgGrantAttributeResponse);
  // RevokeAttribute TODO
  rpc RevokeAttribute(MsgRevokeAttribute) returns (MsgRevokeAttributeResponse);
  // Metadata TODO
  rpc Metadata(MsgMetadata) returns (MsgMetadataResponse);
  rpc File(MsgFile) returns (MsgFileResponse);

  // IssueDenom defines a method for issue a denom.
  rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);
  // MintNFT defines a method for mint a new nft
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);
  // RefundHTLC defines a method for editing a nft.
  rpc EditNFT(MsgEditNFT) returns (MsgEditNFTResponse);
  // TransferNFT defines a method for transferring a nft.
  rpc TransferNFT(MsgTransferNFT) returns (MsgTransferNFTResponse);
  // BurnNFT defines a method for burning a nft.
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);
  // TransferDenom defines a method for transferring a denom.
  rpc TransferDenom(MsgTransferDenom) returns (MsgTransferDenomResponse);
  // MintTrustedContent defines a method for minting a content.
  rpc MintTrustedContent(MsgMintTrustedContent) returns (MsgMintTrustedContentResponse);
  // MintTrustedResource defines a method for minting a resource.
  rpc MintTrustedResource(MsgMintTrustedResource) returns (MsgMintTrustedResourceResponse);
  // InitiateSwap adds a metadata and creates signed voucher
  rpc InitiateSwap(MsgInitiateSwap) returns (MsgInitiateSwapResponse);
  // ClaimSwap acknowledges signed voucher lazy minted NFT with trusted metadata
  rpc ClaimSwap(MsgClaimSwap) returns (MsgClaimSwapResponse);        
}

//  https://github.com/hyperledger/aries-framework-go/blob/5e24fee3adbaf5a462c8951f0e92cada81cd288b/pkg/doc/did/doc_test.go#L1164
message MsgCreateDid {
  string creator = 1;
  string vanity_name = 2;
}

message MsgCreateDidResponse {
  string cid = 1;
  string did = 2;
}

message MsgUpdateDid {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgUpdateDidResponse {

}
message MsgRevokeDid {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgRevokeDidResponse {

}

message MsgMintTrustedContent {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgMintTrustedContentResponse {

}

message MsgInitiateSwap {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgInitiateSwapResponse {

}

message MsgClaimSwap {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgClaimSwapResponse {

}
message MsgMintTrustedResource {
  string creator = 1;
  string did = 2;
  string metadata = 3;
  string cid = 4;
}

message MsgMintTrustedResourceResponse {

}

// MsgRoyaltyInfo
message MsgRoyaltyInfo {
  option (gogoproto.equal) = true;

  string creator = 1;
  string receiver = 2;
  uint64 royaltyFeePercentage =3;  
  string metadataUri = 4;
  string denomId = 5;  
}

/*
message RoyaltyInfo {
  ...
  uint64 updates
  uint64 lastUpdated  
}
message QueryReadRoyaltyInfoResponse {
  string receiver = 1;
  uint64 royaltyAmount = 2; // fee % * sales amount
}
*/

// MsgRoyaltyInfoResponse
message MsgRoyaltyInfoResponse {
  option (gogoproto.equal) = true;

  string receiver = 1;
  uint64 royaltyFeePercentage = 2;
  string metadataUri = 3;

}
// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    string sender = 4;
    string symbol = 5;
    bool mint_restricted = 6 ;
    bool update_restricted = 7 ;
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
    string recipient = 7;
}
message MsgChangeOwnerResponse {
  option (gogoproto.goproto_getters) = false;
  string identity = 1;
  string owner = 2;
  uint64 previousChange = 3;
}

message MsgCreateDIDOwner {
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
  string owner = 2;
  string did_key = 3[ (gogoproto.nullable) = true ];
  string did_web = 4[ (gogoproto.nullable) = true ];  
}

message MsgCreateDIDOwnerResponse {

}

message MsgChangeOwner {
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
  string identity = 2;
  string newOwner = 3;
}

message MsgGrantDelegate {
  option (gogoproto.goproto_getters) = false;
  string delegate = 1;
  string delegateType = 2;
  uint64 validity = 3;
  string creator = 4;
  string identity = 5;
}
message MsgGrantDelegateResponse {
  option (gogoproto.goproto_getters) = false;

  bytes hash = 1;
}
message MsgRevokeDelegate {
  option (gogoproto.goproto_getters) = false;
  string delegate = 1;
  string delegateType = 2;
  uint64 validity = 3;
  string creator = 4;
  string identity = 5;
}
message MsgRevokeDelegateResponse {
  option (gogoproto.goproto_getters) = false;

  bytes hash = 1;
}
message MsgSetAttribute {
  option (gogoproto.goproto_getters) = false;
  string identity = 1;
  string actor = 2;
  string creator = 3;
  bytes name = 4;
  bytes value = 5;

}
message MsgSetAttributeResponse {
  option (gogoproto.goproto_getters) = false;

  bytes hash = 1;
}

message MsgGrantAttribute {
  option (gogoproto.goproto_getters) = false;
  string identity = 1;
  string actor = 2;
  bytes name = 3;
  bytes value = 4;
  string creator = 5;
  uint64 validity = 6;
}

message MsgGrantAttributeResponse {
  option (gogoproto.goproto_getters) = false;

  bool ok = 1;
}

message MsgRevokeAttribute {
  option (gogoproto.goproto_getters) = false;
  string identity = 1;
  string actor = 2;
  bytes name = 3;
  bytes value = 4;
  string creator = 5;

}
message MsgRevokeAttributeResponse {
  option (gogoproto.goproto_getters) = false;

  bytes hash = 1;
}
// MsgTransferNFTResponse defines the Msg/TransferNFT response type.
message MsgTransferNFTResponse {}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
}

// MsgEditNFTResponse defines the Msg/EditNFT response type.
message MsgEditNFTResponse {}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
    string recipient = 7;
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}


// MsgTransferDenom defines an SDK message for transferring an denom to recipient.
message MsgTransferDenom {
    option (gogoproto.equal) = true;
    string id = 1;
    string sender = 2;
    string recipient = 3;
}

// MsgTransferDenomResponse defines the Msg/TransferDenom response type.
message MsgTransferDenomResponse {}

// MsgCreateHTLCResponse defines the Msg/CreateHTLC response type


message MsgFileMetadataResponse {
    option (gogoproto.goproto_getters) = false;
  
    bytes hash = 1;
 }

// this line is used by starport scaffolding # proto/tx/message

message MsgMetadata {
  string creator = 1; // cosmos sdk*
  string name = 2;
  string description = 3;
  string image = 4;
  string owner = 5;   // did owner*eg. did:ancon:{hex-bech32}
  string parent = 6;  // change/diff , ancestor is parent, version
  string sources = 7; // data sources
  string links = 8;   // reference links
  string verified_credential_ref = 9; // mutate
  string did = 10;    // did doc* #my_document
  string from = 11;   // reserved
}

message MsgMetadataResponse {
  string cid = 1;
}

message MsgFile {
  string creator = 1;
  string path = 2;
  string content = 3;
  string mode = 4;
  string time = 5;
  string content_type = 6;
  string did = 7;
  string from = 8;
}

message MsgFileResponse {
  string hash = 1;
}
