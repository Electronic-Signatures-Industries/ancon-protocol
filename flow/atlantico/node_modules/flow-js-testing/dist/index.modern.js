import{flowConfig as e}from"@onflow/fcl-config";import{config as n}from"@onflow/config";import t from"fs";import a from"path";import*as r from"@onflow/types";import*as s from"@onflow/fcl";import{mapValuesToCode as o,getEnvironment as c,reportMissingImports as i,replaceImportAddresses as l,reportMissing as d,sendTransaction as g,extractContractParameters as u,generateSchema as p,splitArgs as f,deployContract as m,executeScript as w}from"flow-cadut";import{ec as h}from"elliptic";import{SHA3 as M}from"sha3";import*as A from"rlp";const b=(e,n,t)=>{if("string"==typeof n)return b(e,n.split("/"),t);if(!n.length)return e;try{const[a,...r]=n;return b(e[a],r,t)}catch(e){return t}},y=(t,a,r,s)=>{let o=b(e(),r,s);o||(o=s),n().put(t,o)},k=async e=>n().get(e),x=async(e,t={})=>{const{port:a=8080}=t,{pkey:r="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=t;y("PRIVATE_KEY",process,"accounts/emulator-account/key",r),y("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),y("BASE_PATH",process,"testing/paths",e),n().put("accessNode.api",`http://localhost:${a}`)};function S(){return S=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},S.apply(this,arguments)}const T=e=>null==e?null:e.replace(/^0x/,""),F=e=>null==e?null:"0x"+T(e),v=new h("p256"),P=(e,n)=>{const t=v.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new M(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),a=t.r.toArrayLike(Buffer,"be",32),r=t.s.toArrayLike(Buffer,"be",32);return Buffer.concat([a,r]).toString("hex")},E=(e,t=0)=>async(a={})=>{const r=await n().get("SERVICE_ADDRESS"),o=await n().get("PRIVATE_KEY");return S({},a,{tempId:`${e=T(e||r)}-${t}`,addr:s.sansPrefix(e),keyId:t,signingFunction:async n=>({keyId:t,addr:F(e),signature:P(o,n.message)})})},B=e=>"object"==typeof e&&null!==e,C=(e,n)=>{if(0===e.length)return[];const[t]=e;return Array.isArray(t)&&t[t.length-1].asArgument?(e=>e.reduce((e,n)=>[...e,...((e,n)=>{const t=e[e.length-1];return e.slice(0,-1).map(e=>((e,n)=>s.arg(e,n))(e,t))})(n)],[]))(e):o(n,e)},I=e=>async n=>{let t,a,r,s,o,c,i,l;if(B(n[0])){const[e]=n,{name:l,code:d,args:g,signers:u,transformers:p,limit:f=999,service:m=!1}=e;if(o=m,!l&&!d)throw Error("Both `name` and `code` are missing. Provide either of them");a=l,t=d,r=u,s=g,c=p||[],i=f}else"script"===e?[a,s,c]=n:[a,r,s,c]=n;if(a){const n="script"===e?ve:Fe;t=await n({name:a})}l=o?ye:await be(t);const d=await de(),g=S({},ye,l,{FlowManager:d});t=Ae(t,g);for(const e in c){const n=c[e];t=await n(t)}return{code:t,signers:r,args:s,limit:i}},R=async(...e)=>{const n=I("tx"),{code:t,args:a,signers:r,limit:o}=await n(e),c=E(),i=[s.transaction(t),s.payer(c),s.proposer(c),s.limit(o)];if(r){const e=r.map(e=>E(e));i.push(s.authorizations(e))}else i.push(s.authorizations([c]));a&&i.push(s.args(C(a,t)));const l=await s.send(i);return await s.tx(l).onceExecuted()},O=async(...e)=>{const n=I("script"),{code:t,args:a,limit:r}=await n(e),o=[s.script(t),s.limit(r)];a&&o.push(s.args(C(a,t)));const c=await s.send(o);return s.decode(c)},U="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n\n",$=async(e={})=>{const n=S({},await c(),e);return i(U,n,"createAccount =>"),l(U,n)},_="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",D=async(e={})=>{const n=S({},await c(),e);return i(_,n,"deployContract =>"),l(_,n)},L='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n  }\n',H=async(e={})=>{const n=S({},await c(),e);return i(L,n,"initManager =>"),l(L,n)},G='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',K=async(e={})=>{const n=S({},await c(),e);return i(G,n,"mintTokens =>"),l(G,n)},V="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",z=async(e={})=>{const n=S({},await c(),e);return i(V,n,"registerContract =>"),l(V,n)},N="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",j=async(e={})=>{const n=S({},await c(),e);return i(N,n,"scratch =>"),l(N,n)},Y="\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n",W=async(e={})=>{const n=S({},await c(),e);return i(Y,n,"setBlockOffset =>"),l(Y,n)},q="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",J=async(e={})=>{const n=S({},await c(),e);return i(q,n,"updateContract =>"),l(q,n)};var Q={createAccountTemplate:$,createAccount:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await $(n);return d("arguments",t.length,3,"createAccount =>"),d("signers",a.length,1,"createAccount =>"),g(S({code:r},e))},deployContractTemplate:D,deployContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await D(n);return d("arguments",t.length,3,"deployContract =>"),d("signers",a.length,1,"deployContract =>"),g(S({code:r},e))},initManagerTemplate:H,initManager:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await H(n);return d("arguments",t.length,1,"initManager =>"),d("signers",a.length,1,"initManager =>"),g(S({code:r},e))},mintTokensTemplate:K,mintTokens:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await K(n);return d("arguments",t.length,2,"mintTokens =>"),d("signers",a.length,1,"mintTokens =>"),g(S({code:r},e))},registerContractTemplate:z,registerContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await z(n);return d("arguments",t.length,2,"registerContract =>"),d("signers",a.length,1,"registerContract =>"),g(S({code:r},e))},scratchTemplate:j,scratch:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await j(n);return d("arguments",t.length,0,"scratch =>"),d("signers",a.length,1,"scratch =>"),g(S({code:r},e))},setBlockOffsetTemplate:W,setBlockOffset:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await W(n);return d("arguments",t.length,1,"setBlockOffset =>"),d("signers",a.length,1,"setBlockOffset =>"),g(S({code:r},e))},updateContractTemplate:J,updateContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await J(n);return d("arguments",t.length,3,"updateContract =>"),d("signers",a.length,1,"updateContract =>"),g(S({code:r},e))}};const{updateContractTemplate:X,deployContractTemplate:Z}=Q,ee=e=>Buffer.from(e,"utf8").toString("hex"),ne=async(...e)=>{const n=await(async e=>{let n,t,a,r,s;if(B(e[0])){const[o]=e,{name:c,to:i,addressMap:l,args:d,update:g}=o;if(!c)throw Error("'name' field is missing");n=c,t=i,r=d,a=l,s=g}else[n,t,a,r,s]=e;const o=await de();return{name:n,to:t,args:r,update:s,addressMap:S({},ye,{FlowManager:o},a)}})(e),{to:t,name:a,addressMap:r,args:s,update:o=!1}=n,c=t||await de(),i=await Te({name:a,addressMap:r});return te({to:c,code:i,name:a,args:s,update:o})},te=async e=>{const{to:n,code:t,name:a,args:r,update:s}=e,o=n||await de(),c=await de(),i=ee(t),l={FlowManager:c};let d=s?await X(l):await Z(l),g=[a,i,c];const m=await u(t);if(r){g=g.concat(r);const e=p(m.args).map(e=>f(e)[0]),n="abcdefghijklmnopqrstuvwxyz";let t=[];for(let a=0;a<e.length;a++)t.push(`${n[a]}: ${e[a]}`);d=d.replace("##ARGS-WITH-TYPES##",`, ${m.args}`),d=d.replace("##ARGS-LIST##",t)}else d=d.replace("##ARGS-WITH-TYPES##",""),d=d.replace("##ARGS-LIST##","");return R({code:d,args:g,signers:[o]})},ae='\n  pub contract FlowManager {\n\n    /// Account Manager\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub fun getAccountAddress(_ name: String): Address?{\n        let accountManager = self.account\n            .getCapability(self.accountManagerPath)\n            .borrow<&FlowManager.Mapper>()!\n\n        return accountManager.getAddress(name)\n    }\n\n    pub let defaultAccounts: {Address : String}\n\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\n        let alias = self.defaultAccounts[address]!\n        return self.getAccountAddress(alias)!\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    /// Environment Manager\n    pub event BlockOffsetChanged(offset: UInt64)\n\n    pub struct MockBlock {\n        pub let id: [UInt8; 32]\n        pub let height: UInt64\n        pub let view: UInt64\n        pub let timestamp: UFix64\n\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\n            self.id = id\n            self.height = height\n            self.view = view\n            self.timestamp = timestamp\n        }\n    }\n\n    pub fun setBlockOffset(_ offset: UInt64){\n        self.blockOffset = offset\n        emit FlowManager.BlockOffsetChanged(offset: offset)\n    }\n\n    pub fun getBlockHeight(): UInt64 {\n        var block = getCurrentBlock()\n        return block.height + self.blockOffset\n    }\n\n    pub fun getBlock(): MockBlock {\n        var block =  getCurrentBlock()\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\n        return mockBlock\n    }\n\n    pub var blockOffset: UInt64;\n\n\n    // Initialize contract\n    init(){\n        // Environment defaults\n        self.blockOffset = 0;\n\n        // Account Manager initialization\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.defaultAccounts = {\n          0x01: "Alice",\n          0x02: "Bob",\n          0x03: "Charlie",\n          0x04: "Dave",\n          0x05: "Eve"\n        }\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n',re="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n",se="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",oe='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',ce="\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n",ie="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var le=Q;const de=async()=>F(await n().get("SERVICE_ADDRESS")),ge=async()=>{const e={FlowManager:await de()},n=await(async(e={})=>{const n=S({},await c(),e);return i(re,n,"checkManager =>"),l(re,n)})(e);try{await O({code:n,service:!0})}catch(e){await(async()=>{const e=await le.initManagerTemplate(),n=await(async(e={})=>{const n=S({},await c(),e);return i(ae,n,"FlowManager =>"),l(ae,n)})(),t=[ee(n)];await R({code:e,args:t,service:!0})})()}return de()},ue=async()=>{const e=await ge(),n=await(async(e={})=>{const n=S({},await c(),e);return i(ce,n,"getBlockOffset =>"),l(ce,n)})({FlowManager:e});return O({code:n})},pe=async e=>{const n=await ge(),t=[e],a=await le.setBlockOffsetTemplate({FlowManager:n});return R({code:a,args:t,payer:[n]})},fe=async(e,n=!1)=>{if(n){const n=ye[e];if(void 0!==n)return n}const t=await ge(),a={FlowManager:t};let s;try{const n=await(async(e={})=>{const n=S({},await c(),e);return i(ie,n,"getContractAddress =>"),l(ie,n)})(a),o=[[e,r.String],[t,r.Address]];s=await O({code:n,args:o,service:!0})}catch(e){console.error("failed to get account address:",e)}return s},me=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,we=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),he=(e,n)=>{const[t,a]=n;return e[t]=a,e},Me=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(we).reduce(he,{}):{},Ae=(e,n,t=!0)=>e.replace(me,(e,a,r,s,o)=>{const c=t?r:o;return`${a}${r} from ${n instanceof Function?n(c):n[c]}`}),be=async e=>{const n={},t=Me(e);for(const e in t)if(ye[e])n[e]=ye[e];else{const t=await fe(e);n[e]=t}return n},ye={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},ke={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},xe=async(e,t="transactions")=>{const r=await n().get("BASE_PATH");let s=r;if(B(r)){const n=r[t];if(n)return a.resolve(n,`./${e}.cdc`);s=r.base}return a.resolve(s,`./${t}/${e}.cdc`)},Se=(e,n={},a=!1)=>{const r=(e=>t.readFileSync(e,"utf8"))(e);return n?Ae(r,S({},a?ke:ye,n)):r},Te=async({name:e,addressMap:n})=>{const t=await xe(e,"contracts");return Se(t,n)},Fe=async({name:e,addressMap:n})=>{const t=await xe(e,"transactions");return Se(t,n)},ve=async({name:e,addressMap:n})=>{const t=await xe(e,"scripts");return Se(t,n)},Pe={ExampleToken:ye.FlowToken},Ee=e=>e[0].toLowerCase()+e.slice(1),Be=async e=>{const n=await(async e=>(await(async(e={})=>{const n=S({},await c(),e);return i(oe,n,"getBalance =>"),l(oe,n)})(Pe)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ee(e)))("FlowToken"),t=Ae(n,ye);return O({code:t,args:[[e,r.Address]]})},Ce=async(e,n)=>{const t=await(async e=>(await le.mintTokensTemplate(Pe)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ee(e)))("FlowToken"),a=Ae(t,ye);return R({code:a,args:[[e,r.Address],[n,r.UFix64]]})},Ie=async e=>{const t=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`,a=await ge(),s={FlowManager:a};let o;try{const e=await(async(e={})=>{const n=S({},await c(),e);return i(se,n,"getAccountAddress =>"),l(se,n)})(s),n=[[t,r.String],[a,r.Address]];o=await O({code:e,args:n,service:!0})}catch(e){console.error("failed to get account address:",e)}if(null===o)try{const e=await le.createAccountTemplate(s),c=[[t,await(async()=>{const e=v.keyFromPrivate(Buffer.from(await n().get("PRIVATE_KEY"),"hex")).getPublic("hex").replace(/^04/,"");return A.encode([Buffer.from(e,"hex"),2,3,1e3]).toString("hex")})(),r.String],[a,r.Address]],{events:i}=await R({code:e,args:c});o=i.find(e=>e.type.includes("AccountAdded")).data.address}catch(e){console.error(e)}return o},{expect:Re}=global,Oe=async e=>"function"==typeof e?await e():await e,Ue=async e=>{const n=Oe(e);return await Re(n).resolves.not.toBe(null),await Re(n).resolves.not.toThrow(),n.then(({status:e,errorMessage:n})=>{Re(e).toBe(4),Re(n).toBe("")}),n},$e=async e=>{const n=Oe(e);return await Re(n).resolves.not.toThrow(),n},_e=async e=>{const n=Oe(e);await Re(n).rejects.not.toBe(null)},De=async e=>{const n=Oe(e);await Re(n).rejects.not.toBe(null),await Re(n).rejects.toThrow()},Le=async e=>{let n=e;return((e,n)=>new RegExp("import\\s+FlowManager").test(n))(0,e)||(n=`\n      ${await(async()=>`import FlowManager from ${await de()}`)()}\n      ${e}  \n  `),n.replace(/getCurrentBlock\(\).height/g,"FlowManager.getBlockHeight()")},{spawn:He}=require("child_process");var Ge=new class{constructor(){this.initialized=!1,this.logging=!1,this.logProcessor=e=>e}setLogging(e){this.logging=e}log(e,n="log"){this.logging&&console[n](e)}extractKeyValue(e){const[n,t]=e.split("=");return t.includes("LOG")?{key:n,value:t.replace('"[1;34m','"[1[34m')}:{key:n,value:t}}parseDataBuffer(e){const n=e.toString().match(/((\w+=\w+)|(\w+=".*?"))/g);return n?n.map(e=>e.replace(/"/g,"")).reduce((e,n)=>{const{key:t,value:a}=this.extractKeyValue(n);return e[t]=a,e},{}):{}}async start(e=8080,n=!1){let t=e-8080+3569;return this.logging=n,this.filters=[],this.process=He("flow",["emulator","-v","--http-port",e,"--port",t]),this.logProcessor=e=>e,new Promise((e,n)=>{this.process.stdout.on("data",n=>{if(this.filters.length>0){for(let e=0;e<this.filters.length;e++)if(n.includes(`${this.filters[e]}`)){this.log(`LOG: ${n}`);break}}else this.log(`LOG: ${n}`);n.includes("Starting HTTP server")&&(this.log("EMULATOR IS UP! Listening for events!"),this.initialized=!0,e(!0))}),this.process.stderr.on("data",e=>{this.log(`ERROR: ${e}`,"error"),this.initialized=!1,n()}),this.process.on("close",n=>{this.log(`emulator exited with code ${n}`),this.initialized=!1,e(!1)})})}clearFilters(){this.filters=[]}removeFilter(e){this.filters=this.filters(n=>n!==e)}addFilter(e){this.filters.includes(e)||this.filters.push(e)}async stop(){return new Promise(e=>{this.process.kill(),setTimeout(()=>{this.initialized=!1,e(!1)},50)})}};export{Le as builtInMethods,te as deployContract,ne as deployContractByName,Ge as emulator,O as executeScript,Me as extractImports,Ie as getAccountAddress,ue as getBlockOffset,k as getConfigValue,fe as getContractAddress,Te as getContractCode,Be as getFlowBalance,ve as getScriptCode,de as getServiceAddress,Se as getTemplate,Fe as getTransactionCode,x as init,Ce as mintFlow,Oe as promise,Ae as replaceImportAddresses,be as resolveImports,R as sendTransaction,y as set,pe as setBlockOffset,Ue as shallPass,$e as shallResolve,_e as shallRevert,De as shallThrow};
//# sourceMappingURL=index.modern.js.map
