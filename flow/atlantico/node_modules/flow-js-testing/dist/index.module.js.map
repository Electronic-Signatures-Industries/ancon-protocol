{"version":3,"file":"index.module.js","sources":["../src/config.js","../src/init.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/setBlockOffset.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getBlockOffset.js","../src/generated/scripts/getContractAddress.js","../src/generated/scripts/index.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/flow-token.js","../src/account.js","../src/jest-asserts.js","../src/transformers.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"testing/paths\", basePath);\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { mapValuesToCode } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst resolveArguments = (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const [first] = args;\n  if (Array.isArray(first)) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return mapArgs(args);\n    }\n  }\n\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n\nexport const extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService, ixTransformers, ixLimit;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, transformers, limit = 999, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n      ixTransformers = transformers || [];\n\n      ixLimit = limit;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs, ixTransformers] = params;\n      } else {\n        [ixName, ixSigners, ixArgs, ixTransformers] = params;\n      }\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    // Apply all the necessary transformations to the code\n    for (const i in ixTransformers) {\n      const transformer = ixTransformers[i];\n      ixCode = await transformer(ixCode);\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n      limit: ixLimit,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers, limit } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(limit),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {string} props.name - name of the file to source code from.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args, limit } = await extractor(props);\n\n  const ix = [\n    fcl.script(code),\n    fcl.limit(limit)\n  ];\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction (_ name: String, pubKey: String, manager: Address) {\r\n    prepare( admin: AuthAccount) {\r\n        let newAccount = AuthAccount(payer:admin)\r\n        newAccount.addPublicKey(pubKey.decodeHex())\r\n\r\n        let linkPath = FlowManager.accountManagerPath\r\n        let accountManager = getAccount(manager)\r\n                            .getCapability(linkPath)!\r\n                            .borrow<&FlowManager.Mapper>()!\r\n        \r\n        // Create a record in account database\r\n        let address = newAccount.address\r\n        accountManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for createAccount transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends createAccount transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const createAccount = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `createAccount =>`);\n  reportMissing(\"signers\", signers.length, 1, `createAccount =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction,\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for deployContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends deployContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const deployContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `deployContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `deployContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n  }\n`;\n\n/**\n* Method to generate cadence code for initManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends initManager transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const initManager = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `initManager =>`);\n  reportMissing(\"signers\", signers.length, 1, `initManager =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for mintTokens transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends mintTokens transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const mintTokens = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `mintTokens =>`);\n  reportMissing(\"signers\", signers.length, 1, `mintTokens =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction(name: String, address: Address) {\r\n    prepare(signer: AuthAccount){\r\n        let linkPath = FlowManager.contractManagerPath\r\n        let contractManager = signer\r\n                                .getCapability(linkPath)!\r\n                                .borrow<&FlowManager.Mapper>()!\r\n        contractManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for registerContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends registerContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const registerContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `registerContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `registerContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction{\r\n    prepare(acct: AuthAccount){\r\n        log(acct.address)\r\n    }\r\n}\n`;\n\n/**\n* Method to generate cadence code for scratch transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends scratch transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const scratch = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `scratch =>`);\n  reportMissing(\"signers\", signers.length, 1, `scratch =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for setBlockOffset transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const setBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `setBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends setBlockOffset transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const setBlockOffset = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await setBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `setBlockOffset =>`);\n  reportMissing(\"signers\", signers.length, 1, `setBlockOffset =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for updateContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends updateContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const updateContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `updateContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `updateContract =>`);\n\n  return sendTransaction({code, ...props})\n}","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { setBlockOffsetTemplate, setBlockOffset } from \"./setBlockOffset\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccountTemplate,\n  createAccount,\n  deployContractTemplate,\n  deployContract,\n  initManagerTemplate,\n  initManager,\n  mintTokensTemplate,\n  mintTokens,\n  registerContractTemplate,\n  registerContract,\n  scratchTemplate,\n  scratch,\n  setBlockOffsetTemplate,\n  setBlockOffset,\n  updateContractTemplate,\n  updateContract,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\nimport { extractContractParameters, generateSchema, splitArgs } from \"flow-cadut\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [name, hexedCode, managerAddress];\n\n  const params = await extractContractParameters(contractCode);\n\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n    const schema = generateSchema(params.args).map((item) => splitArgs(item)[0]);\n\n    const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n    let argList = [];\n    for (let i = 0; i < schema.length; i++) {\n      const value = schema[i];\n      argList.push(`${argLetter[i]}: ${value}`);\n    }\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${params.args}`);\n    code = code.replace(\"##ARGS-LIST##\", argList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/** pragma type contract **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  deployContract,\n} from 'flow-cadut'\n\nexport const CODE = `\n  pub contract FlowManager {\r\n\r\n    /// Account Manager\r\n    pub event AccountAdded(address: Address)\r\n\r\n    pub struct Mapper {\r\n        pub let accounts: {String: Address}\r\n\r\n        pub fun getAddress(_ name: String): Address? {\r\n            return self.accounts[name]\r\n        }\r\n\r\n        pub fun setAddress(_ name: String, address: Address){\r\n            self.accounts[name] = address\r\n            emit FlowManager.AccountAdded(address: address)\r\n        }\r\n\r\n        init(){\r\n            self.accounts = {}\r\n        }\r\n    }\r\n\r\n    pub fun getAccountAddress(_ name: String): Address?{\r\n        let accountManager = self.account\r\n            .getCapability(self.accountManagerPath)\r\n            .borrow<&FlowManager.Mapper>()!\r\n\r\n        return accountManager.getAddress(name)\r\n    }\r\n\r\n    pub let defaultAccounts: {Address : String}\r\n\r\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\r\n        let alias = self.defaultAccounts[address]!\r\n        return self.getAccountAddress(alias)!\r\n    }\r\n\r\n    pub let accountManagerStorage: StoragePath\r\n    pub let contractManagerStorage: StoragePath\r\n    pub let accountManagerPath: PublicPath\r\n    pub let contractManagerPath: PublicPath\r\n\r\n    /// Environment Manager\r\n    pub event BlockOffsetChanged(offset: UInt64)\r\n\r\n    pub struct MockBlock {\r\n        pub let id: [UInt8; 32]\r\n        pub let height: UInt64\r\n        pub let view: UInt64\r\n        pub let timestamp: UFix64\r\n\r\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\r\n            self.id = id\r\n            self.height = height\r\n            self.view = view\r\n            self.timestamp = timestamp\r\n        }\r\n    }\r\n\r\n    pub fun setBlockOffset(_ offset: UInt64){\r\n        self.blockOffset = offset\r\n        emit FlowManager.BlockOffsetChanged(offset: offset)\r\n    }\r\n\r\n    pub fun getBlockHeight(): UInt64 {\r\n        var block = getCurrentBlock()\r\n        return block.height + self.blockOffset\r\n    }\r\n\r\n    pub fun getBlock(): MockBlock {\r\n        var block =  getCurrentBlock()\r\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\r\n        return mockBlock\r\n    }\r\n\r\n    pub var blockOffset: UInt64;\r\n\r\n\r\n    // Initialize contract\r\n    init(){\r\n        // Environment defaults\r\n        self.blockOffset = 0;\r\n\r\n        // Account Manager initialization\r\n        let accountManager = Mapper()\r\n        let contractManager = Mapper()\r\n\r\n        self.defaultAccounts = {\r\n          0x01: \"Alice\",\r\n          0x02: \"Bob\",\r\n          0x03: \"Charlie\",\r\n          0x04: \"Dave\",\r\n          0x05: \"Eve\"\r\n        }\r\n\r\n        self.accountManagerStorage = /storage/testSuitAccountManager\r\n        self.contractManagerStorage = /storage/testSuitContractManager\r\n\r\n        self.accountManagerPath = /public/testSuitAccountManager\r\n        self.contractManagerPath = /public/testSuitContractManager\r\n        \r\n        // Destroy previously stored values\r\n        self.account.load<Mapper>(from: self.accountManagerStorage)\r\n        self.account.load<Mapper>(from: self.contractManagerStorage)\r\n\r\n        self.account.save(accountManager, to: self.accountManagerStorage)\r\n        self.account.save(contractManager, to: self.contractManagerStorage)\r\n\r\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\r\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\r\n    }\r\n}\r\n \n`;\n\n/**\n* Method to generate cadence code for FlowManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Deploys FlowManager transaction to the network\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> args - list of arguments\n* param Array<string> - list of signers\n*/\nexport const  deployFlowManager = async (props) => {\n  const { addressMap = {} } = props;\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\"\n\n  return deployContract({ code, name, ...props })\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `checkManager =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.accountManagerPath\r\n    let accountManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return accountManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getAccountAddress =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\r\n\r\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\r\nimport ExampleToken from 0xTOKENADDRESS\r\n\r\npub fun main(account: Address): UFix64 {\r\n    let acct = getAccount(account)\r\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\r\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\r\n\r\n    return vaultRef.balance\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `getBalance =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBlockOffset = async (props = {}) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `getBlockOffset =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.contractManagerPath\r\n    let contractManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return contractManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getContractAddress =>`);\n\n  return executeScript({code, ...props})\n}","import { checkManagerTemplate, checkManager } from \"./checkManager\";\nimport { getAccountAddressTemplate, getAccountAddress } from \"./getAccountAddress\";\nimport { getBalanceTemplate, getBalance } from \"./getBalance\";\nimport { getBlockOffsetTemplate, getBlockOffset } from \"./getBlockOffset\";\nimport { getContractAddressTemplate, getContractAddress } from \"./getContractAddress\";\nimport { getManagerAddressTemplate, getManagerAddress } from \"./getManagerAddress\";\n\nexport default {\n  checkManagerTemplate,\n  checkManager,\n  getAccountAddressTemplate,\n  getAccountAddress,\n  getBalanceTemplate,\n  getBalance,\n  getBlockOffsetTemplate,\n  getBlockOffset,\n  getContractAddressTemplate,\n  getContractAddress,\n  getManagerAddressTemplate,\n  getManagerAddress,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [hexedContract];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n      service: true,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n\n// TODO: replace method above after Cadence will allow to get contracts list on PublicAccount\n/*\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const code = `\n    pub fun main(address: Address):Bool {\n      return getAccount(address).contracts.get(\"FlowManager\") != null\n    }\n  `;\n  const result = await executeScript({ code, args: [serviceAddress] });\n\n  if (!result) {\n    await initManager();\n  }\n\n  return serviceAddress;\n};\n */\n\nexport const getBlockOffset = async () => {\n  const FlowManager = await getManagerAddress();\n  const code = await registry.scripts.getBlockOffsetTemplate({ FlowManager });\n  return executeScript({ code });\n};\n\nexport const setBlockOffset = async (offset) => {\n  const FlowManager = await getManagerAddress();\n\n  const args = [offset];\n  const code = await registry.transactions.setBlockOffsetTemplate({ FlowManager });\n  const payer = [FlowManager];\n\n  return sendTransaction({ code, args, payer });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\nimport { isObject } from \"./utils\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"scripts\";\nconst TRANSACTION = \"transactions\";\nconst CONTRACT = \"contracts\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n\n  // We can simply overwrite \"configBase\" variable, but I believe it's better to leave it unchanged\n  let basePath = configBase;\n\n  // It's possible to pass a set of paths via object, so we need to check if that's the case\n  if (isObject(configBase)) {\n    const typePath = configBase[type];\n\n    // if there is a specific path for this type, then we shall resolve it\n    if (typePath) {\n      return path.resolve(typePath, `./${name}.cdc`);\n    }\n\n    // otherwise use \"base\" value\n    basePath = configBase.base;\n  }\n\n  return path.resolve(basePath, `./${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getServiceAddress } from \"./manager\";\n\nexport const importManager = async () => {\n  const serviceAddress = await getServiceAddress();\n  return `import FlowManager from ${serviceAddress}`;\n};\n\nexport const importExists = (contractName, code) => {\n  return new RegExp(`import\\\\s+${contractName}`).test(code);\n};\n\nexport const builtInMethods = async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/getCurrentBlock\\(\\).height/g, `FlowManager.getBlockHeight()`);\n};\n\nconst addressToIndex = (address) => {\n  return parseInt(address) - 1;\n};\n\nconst addressToAlias = (accounts) => (address) => accounts[addressToIndex(address)];\n\nexport const playgroundImport = (accounts) => async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/(?:getAccount\\()(.+)(?:\\))/g, (match, g1) => {\n    const alias = addressToAlias(accounts)(g1);\n    if (!alias) {\n      return `getAccount(FlowManager.resolveDefaultAccounts(${g1}))`;\n    }\n    return `getAccount(FlowManager.getAccountAddress(\"${alias}\"))`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nexport class Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = false;\n    this.logProcessor = (item) => item;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  extractKeyValue(str) {\n    // TODO: add regexp check that it conforms to necessary pattern\n    const [key, value] = str.split(\"=\");\n    if (value.includes(\"LOG\")) {\n      return { key, value: value.replace(`\"\\x1b[1;34m`, `\"\\x1b[1[34m`) };\n    }\n    return { key, value };\n  }\n\n  parseDataBuffer(data) {\n    const match = data.toString().match(/((\\w+=\\w+)|(\\w+=\".*?\"))/g);\n    if (match) {\n      const pairs = match.map((item) => item.replace(/\"/g, \"\"));\n      return pairs.reduce((acc, pair) => {\n        const { key, value } = this.extractKeyValue(pair);\n        acc[key] = value;\n        return acc;\n      }, {});\n    }\n    return {};\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.filters = [];\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n    this.logProcessor = (item) => item;\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        // const buf = this.parseDataBuffer(data);\n\n        if (this.filters.length > 0) {\n          for (let i = 0; i < this.filters.length; i++) {\n            const filter = this.filters[i];\n            if (data.includes(`${filter}`)) {\n              // TODO: use this.log to output string with this.logProcessor and type\n              // TODO: Fix output colors: https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\n              // this.log(`LOG: ${data.toString().replace(/\\\\x1b\\[1;34m/, \"\\x1b[36m\")}`);\n              this.log(`LOG: ${data}`);\n              break;\n            }\n          }\n        } else {\n          this.log(`LOG: ${data}`);\n        }\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`ERROR: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Clear all log filters.\n   * @returns void\n   **/\n  clearFilters() {\n    this.filters = [];\n  }\n\n  /**\n   * Remove specific type of log filter.\n   * @param {(debug|info|warning)} type - type of message\n   * @returns void\n   **/\n  removeFilter(type) {\n    this.filters = this.filters((item) => item !== type);\n  }\n\n  /**\n   * Add log filter.\n   * @param {(debug|info|warning)} type type - type of message\n   * @returns void\n   **/\n  addFilter(type) {\n    if (!this.filters.includes(type)) {\n      this.filters.push(type);\n    }\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(false);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","getConfigValue","init","basePath","props","port","pkey","process","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","tempId","fcl","signingFunction","data","signature","message","isObject","arg","pact","state","o","_settle","bind","v","then","observer","_Pact","prototype","onFulfilled","onRejected","result","this","callback","e","_this","resolveArguments","args","code","first","Array","isArray","asArgument","reduce","acc","arr","convert","type","slice","map","unwrap","mapArgs","mapValuesToCode","extractParameters","ixType","params","getServiceAddress","ixCode","signers","ixSigners","ixArgs","limit","ixLimit","addressMap","defaultsByName","deployedContracts","FlowManager","replaceImportAddresses","target","body","check","keys","push","array","reject","i","_cycle","thenable","transformer","ixTransformers","ixService","resolveImports","ixName","name","transformers","service","Error","getScriptCode","getTransactionCode","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","auths","authorizations","send","response","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","getEnvironment","envMap","fullMap","reportMissingImports","deployContractTemplate","initManagerTemplate","mintTokensTemplate","registerContractTemplate","scratchTemplate","setBlockOffsetTemplate","updateContractTemplate","createAccount","reportMissing","mintTokens","registerContract","scratch","updateContract","txRegistry","hexContract","contract","ixTo","ixAddressMap","ixUpdate","to","deployContractByName","resolvedAddress","getContractCode","contractCode","deployContract","containerAddress","managerAddress","hexedCode","deployArgs","extractContractParameters","schema","generateSchema","item","splitArgs","argLetter","argList","transactions","getManagerAddress","registry","recover","hexedContract","initManager","getBlockOffset","setBlockOffset","offset","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","t","String","Address","console","error","REGEXP_IMPORT","getPairs","line","filter","collect","extractImports","includes","byName","match","imp","_","Function","_forTo","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","configBase","typePath","resolve","base","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getFlowBalance","makeGetBalance","raw","types","mintFlow","recipient","amount","makeMintTransaction","UFix64","getAccountAddress","accountName","Math","random","pow","toFixed","accountAddress","_Buffer","publicKey","getPublic","rlp","encode","pubFlowKey","events","event","find","expect","global","promise","shallPass","wrappedInteraction","resolves","not","toBe","toThrow","status","errorMessage","shallResolve","shallRevert","rejects","shallThrow","builtInMethods","injectedImports","contractName","RegExp","test","importExists","importManager","imports","spawn","require","constructor","initialized","logging","logProcessor","setLogging","log","extractKeyValue","str","parseDataBuffer","pair","start","grpc","filters","Promise","stdout","on","stderr","clearFilters","removeFilter","addFilter","stop","_this2","kill","setTimeout"],"mappings":"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"}