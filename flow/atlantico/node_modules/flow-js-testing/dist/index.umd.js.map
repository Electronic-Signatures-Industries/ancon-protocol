{"version":3,"file":"index.umd.js","sources":["../src/config.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/setBlockOffset.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getBlockOffset.js","../src/generated/scripts/getContractAddress.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/account.js","../src/jest-asserts.js","../src/emulator.js","../src/transformers.js","../src/flow-token.js","../src/init.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { mapValuesToCode } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst resolveArguments = (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const [first] = args;\n  if (Array.isArray(first)) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return mapArgs(args);\n    }\n  }\n\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n\nexport const extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService, ixTransformers, ixLimit;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, transformers, limit = 999, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n      ixTransformers = transformers || [];\n\n      ixLimit = limit;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs, ixTransformers] = params;\n      } else {\n        [ixName, ixSigners, ixArgs, ixTransformers] = params;\n      }\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    // Apply all the necessary transformations to the code\n    for (const i in ixTransformers) {\n      const transformer = ixTransformers[i];\n      ixCode = await transformer(ixCode);\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n      limit: ixLimit,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers, limit } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(limit),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {string} props.name - name of the file to source code from.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args, limit } = await extractor(props);\n\n  const ix = [\n    fcl.script(code),\n    fcl.limit(limit)\n  ];\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction (_ name: String, pubKey: String, manager: Address) {\r\n    prepare( admin: AuthAccount) {\r\n        let newAccount = AuthAccount(payer:admin)\r\n        newAccount.addPublicKey(pubKey.decodeHex())\r\n\r\n        let linkPath = FlowManager.accountManagerPath\r\n        let accountManager = getAccount(manager)\r\n                            .getCapability(linkPath)!\r\n                            .borrow<&FlowManager.Mapper>()!\r\n        \r\n        // Create a record in account database\r\n        let address = newAccount.address\r\n        accountManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for createAccount transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends createAccount transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const createAccount = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `createAccount =>`);\n  reportMissing(\"signers\", signers.length, 1, `createAccount =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction,\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for deployContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends deployContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const deployContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `deployContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `deployContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n  }\n`;\n\n/**\n* Method to generate cadence code for initManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends initManager transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const initManager = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `initManager =>`);\n  reportMissing(\"signers\", signers.length, 1, `initManager =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for mintTokens transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends mintTokens transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const mintTokens = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `mintTokens =>`);\n  reportMissing(\"signers\", signers.length, 1, `mintTokens =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction(name: String, address: Address) {\r\n    prepare(signer: AuthAccount){\r\n        let linkPath = FlowManager.contractManagerPath\r\n        let contractManager = signer\r\n                                .getCapability(linkPath)!\r\n                                .borrow<&FlowManager.Mapper>()!\r\n        contractManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for registerContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends registerContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const registerContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `registerContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `registerContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction{\r\n    prepare(acct: AuthAccount){\r\n        log(acct.address)\r\n    }\r\n}\n`;\n\n/**\n* Method to generate cadence code for scratch transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends scratch transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const scratch = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `scratch =>`);\n  reportMissing(\"signers\", signers.length, 1, `scratch =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for setBlockOffset transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const setBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `setBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends setBlockOffset transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const setBlockOffset = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await setBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `setBlockOffset =>`);\n  reportMissing(\"signers\", signers.length, 1, `setBlockOffset =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for updateContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends updateContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const updateContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `updateContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `updateContract =>`);\n\n  return sendTransaction({code, ...props})\n}","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { setBlockOffsetTemplate, setBlockOffset } from \"./setBlockOffset\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccountTemplate,\n  createAccount,\n  deployContractTemplate,\n  deployContract,\n  initManagerTemplate,\n  initManager,\n  mintTokensTemplate,\n  mintTokens,\n  registerContractTemplate,\n  registerContract,\n  scratchTemplate,\n  scratch,\n  setBlockOffsetTemplate,\n  setBlockOffset,\n  updateContractTemplate,\n  updateContract,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\nimport { extractContractParameters, generateSchema, splitArgs } from \"flow-cadut\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [name, hexedCode, managerAddress];\n\n  const params = await extractContractParameters(contractCode);\n\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n    const schema = generateSchema(params.args).map((item) => splitArgs(item)[0]);\n\n    const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n    let argList = [];\n    for (let i = 0; i < schema.length; i++) {\n      const value = schema[i];\n      argList.push(`${argLetter[i]}: ${value}`);\n    }\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${params.args}`);\n    code = code.replace(\"##ARGS-LIST##\", argList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/** pragma type contract **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  deployContract,\n} from 'flow-cadut'\n\nexport const CODE = `\n  pub contract FlowManager {\r\n\r\n    /// Account Manager\r\n    pub event AccountAdded(address: Address)\r\n\r\n    pub struct Mapper {\r\n        pub let accounts: {String: Address}\r\n\r\n        pub fun getAddress(_ name: String): Address? {\r\n            return self.accounts[name]\r\n        }\r\n\r\n        pub fun setAddress(_ name: String, address: Address){\r\n            self.accounts[name] = address\r\n            emit FlowManager.AccountAdded(address: address)\r\n        }\r\n\r\n        init(){\r\n            self.accounts = {}\r\n        }\r\n    }\r\n\r\n    pub fun getAccountAddress(_ name: String): Address?{\r\n        let accountManager = self.account\r\n            .getCapability(self.accountManagerPath)\r\n            .borrow<&FlowManager.Mapper>()!\r\n\r\n        return accountManager.getAddress(name)\r\n    }\r\n\r\n    pub let defaultAccounts: {Address : String}\r\n\r\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\r\n        let alias = self.defaultAccounts[address]!\r\n        return self.getAccountAddress(alias)!\r\n    }\r\n\r\n    pub let accountManagerStorage: StoragePath\r\n    pub let contractManagerStorage: StoragePath\r\n    pub let accountManagerPath: PublicPath\r\n    pub let contractManagerPath: PublicPath\r\n\r\n    /// Environment Manager\r\n    pub event BlockOffsetChanged(offset: UInt64)\r\n\r\n    pub struct MockBlock {\r\n        pub let id: [UInt8; 32]\r\n        pub let height: UInt64\r\n        pub let view: UInt64\r\n        pub let timestamp: UFix64\r\n\r\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\r\n            self.id = id\r\n            self.height = height\r\n            self.view = view\r\n            self.timestamp = timestamp\r\n        }\r\n    }\r\n\r\n    pub fun setBlockOffset(_ offset: UInt64){\r\n        self.blockOffset = offset\r\n        emit FlowManager.BlockOffsetChanged(offset: offset)\r\n    }\r\n\r\n    pub fun getBlockHeight(): UInt64 {\r\n        var block = getCurrentBlock()\r\n        return block.height + self.blockOffset\r\n    }\r\n\r\n    pub fun getBlock(): MockBlock {\r\n        var block =  getCurrentBlock()\r\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\r\n        return mockBlock\r\n    }\r\n\r\n    pub var blockOffset: UInt64;\r\n\r\n\r\n    // Initialize contract\r\n    init(){\r\n        // Environment defaults\r\n        self.blockOffset = 0;\r\n\r\n        // Account Manager initialization\r\n        let accountManager = Mapper()\r\n        let contractManager = Mapper()\r\n\r\n        self.defaultAccounts = {\r\n          0x01: \"Alice\",\r\n          0x02: \"Bob\",\r\n          0x03: \"Charlie\",\r\n          0x04: \"Dave\",\r\n          0x05: \"Eve\"\r\n        }\r\n\r\n        self.accountManagerStorage = /storage/testSuitAccountManager\r\n        self.contractManagerStorage = /storage/testSuitContractManager\r\n\r\n        self.accountManagerPath = /public/testSuitAccountManager\r\n        self.contractManagerPath = /public/testSuitContractManager\r\n        \r\n        // Destroy previously stored values\r\n        self.account.load<Mapper>(from: self.accountManagerStorage)\r\n        self.account.load<Mapper>(from: self.contractManagerStorage)\r\n\r\n        self.account.save(accountManager, to: self.accountManagerStorage)\r\n        self.account.save(contractManager, to: self.contractManagerStorage)\r\n\r\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\r\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\r\n    }\r\n}\r\n \n`;\n\n/**\n* Method to generate cadence code for FlowManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Deploys FlowManager transaction to the network\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> args - list of arguments\n* param Array<string> - list of signers\n*/\nexport const  deployFlowManager = async (props) => {\n  const { addressMap = {} } = props;\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\"\n\n  return deployContract({ code, name, ...props })\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `checkManager =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.accountManagerPath\r\n    let accountManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return accountManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getAccountAddress =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\r\n\r\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\r\nimport ExampleToken from 0xTOKENADDRESS\r\n\r\npub fun main(account: Address): UFix64 {\r\n    let acct = getAccount(account)\r\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\r\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\r\n\r\n    return vaultRef.balance\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `getBalance =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBlockOffset = async (props = {}) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `getBlockOffset =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.contractManagerPath\r\n    let contractManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return contractManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getContractAddress =>`);\n\n  return executeScript({code, ...props})\n}","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [hexedContract];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n      service: true,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n\n// TODO: replace method above after Cadence will allow to get contracts list on PublicAccount\n/*\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const code = `\n    pub fun main(address: Address):Bool {\n      return getAccount(address).contracts.get(\"FlowManager\") != null\n    }\n  `;\n  const result = await executeScript({ code, args: [serviceAddress] });\n\n  if (!result) {\n    await initManager();\n  }\n\n  return serviceAddress;\n};\n */\n\nexport const getBlockOffset = async () => {\n  const FlowManager = await getManagerAddress();\n  const code = await registry.scripts.getBlockOffsetTemplate({ FlowManager });\n  return executeScript({ code });\n};\n\nexport const setBlockOffset = async (offset) => {\n  const FlowManager = await getManagerAddress();\n\n  const args = [offset];\n  const code = await registry.transactions.setBlockOffsetTemplate({ FlowManager });\n  const payer = [FlowManager];\n\n  return sendTransaction({ code, args, payer });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\nimport { isObject } from \"./utils\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"scripts\";\nconst TRANSACTION = \"transactions\";\nconst CONTRACT = \"contracts\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n\n  // We can simply overwrite \"configBase\" variable, but I believe it's better to leave it unchanged\n  let basePath = configBase;\n\n  // It's possible to pass a set of paths via object, so we need to check if that's the case\n  if (isObject(configBase)) {\n    const typePath = configBase[type];\n\n    // if there is a specific path for this type, then we shall resolve it\n    if (typePath) {\n      return path.resolve(typePath, `./${name}.cdc`);\n    }\n\n    // otherwise use \"base\" value\n    basePath = configBase.base;\n  }\n\n  return path.resolve(basePath, `./${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nexport class Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = false;\n    this.logProcessor = (item) => item;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  extractKeyValue(str) {\n    // TODO: add regexp check that it conforms to necessary pattern\n    const [key, value] = str.split(\"=\");\n    if (value.includes(\"LOG\")) {\n      return { key, value: value.replace(`\"\\x1b[1;34m`, `\"\\x1b[1[34m`) };\n    }\n    return { key, value };\n  }\n\n  parseDataBuffer(data) {\n    const match = data.toString().match(/((\\w+=\\w+)|(\\w+=\".*?\"))/g);\n    if (match) {\n      const pairs = match.map((item) => item.replace(/\"/g, \"\"));\n      return pairs.reduce((acc, pair) => {\n        const { key, value } = this.extractKeyValue(pair);\n        acc[key] = value;\n        return acc;\n      }, {});\n    }\n    return {};\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.filters = [];\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n    this.logProcessor = (item) => item;\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        // const buf = this.parseDataBuffer(data);\n\n        if (this.filters.length > 0) {\n          for (let i = 0; i < this.filters.length; i++) {\n            const filter = this.filters[i];\n            if (data.includes(`${filter}`)) {\n              // TODO: use this.log to output string with this.logProcessor and type\n              // TODO: Fix output colors: https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\n              // this.log(`LOG: ${data.toString().replace(/\\\\x1b\\[1;34m/, \"\\x1b[36m\")}`);\n              this.log(`LOG: ${data}`);\n              break;\n            }\n          }\n        } else {\n          this.log(`LOG: ${data}`);\n        }\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`ERROR: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Clear all log filters.\n   * @returns void\n   **/\n  clearFilters() {\n    this.filters = [];\n  }\n\n  /**\n   * Remove specific type of log filter.\n   * @param {(debug|info|warning)} type - type of message\n   * @returns void\n   **/\n  removeFilter(type) {\n    this.filters = this.filters((item) => item !== type);\n  }\n\n  /**\n   * Add log filter.\n   * @param {(debug|info|warning)} type type - type of message\n   * @returns void\n   **/\n  addFilter(type) {\n    if (!this.filters.includes(type)) {\n      this.filters.push(type);\n    }\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(false);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getServiceAddress } from \"./manager\";\n\nexport const importManager = async () => {\n  const serviceAddress = await getServiceAddress();\n  return `import FlowManager from ${serviceAddress}`;\n};\n\nexport const importExists = (contractName, code) => {\n  return new RegExp(`import\\\\s+${contractName}`).test(code);\n};\n\nexport const builtInMethods = async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/getCurrentBlock\\(\\).height/g, `FlowManager.getBlockHeight()`);\n};\n\nconst addressToIndex = (address) => {\n  return parseInt(address) - 1;\n};\n\nconst addressToAlias = (accounts) => (address) => accounts[addressToIndex(address)];\n\nexport const playgroundImport = (accounts) => async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/(?:getAccount\\()(.+)(?:\\))/g, (match, g1) => {\n    const alias = addressToAlias(accounts)(g1);\n    if (!alias) {\n      return `getAccount(FlowManager.resolveDefaultAccounts(${g1}))`;\n    }\n    return `getAccount(FlowManager.getAccountAddress(\"${alias}\"))`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"testing/paths\", basePath);\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n};\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","pkey","tempId","fcl","signingFunction","data","signature","message","isObject","arg","pact","state","o","_settle","bind","v","then","observer","_Pact","prototype","onFulfilled","onRejected","result","this","callback","e","_this","resolveArguments","args","code","first","Array","isArray","asArgument","reduce","acc","arr","convert","type","slice","map","unwrap","mapArgs","mapValuesToCode","extractParameters","ixType","params","getServiceAddress","ixCode","signers","ixSigners","ixArgs","limit","ixLimit","addressMap","defaultsByName","deployedContracts","FlowManager","replaceImportAddresses","target","body","check","keys","push","array","reject","i","_cycle","thenable","transformer","ixTransformers","ixService","resolveImports","ixName","props","name","transformers","service","Error","getScriptCode","getTransactionCode","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","auths","authorizations","send","response","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","getEnvironment","envMap","fullMap","reportMissingImports","deployContractTemplate","initManagerTemplate","mintTokensTemplate","registerContractTemplate","scratchTemplate","setBlockOffsetTemplate","updateContractTemplate","createAccount","reportMissing","mintTokens","registerContract","scratch","updateContract","txRegistry","hexContract","contract","ixTo","ixAddressMap","ixUpdate","to","deployContract","containerAddress","managerAddress","hexedCode","contractCode","deployArgs","extractContractParameters","schema","generateSchema","item","splitArgs","argLetter","argList","transactions","getManagerAddress","registry","recover","hexedContract","initManager","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","t","String","Address","console","error","REGEXP_IMPORT","getPairs","line","filter","collect","extractImports","includes","byName","match","imp","_","Function","_forTo","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","configBase","basePath","typePath","resolve","base","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","getContractCode","TRANSACTION","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getAccountAddress","expect","global","promise","spawn","require","constructor","initialized","logging","logProcessor","setLogging","log","extractKeyValue","str","parseDataBuffer","pair","start","port","grpc","filters","process","Promise","stdout","on","stderr","clearFilters","removeFilter","addFilter","stop","_this2","kill","setTimeout","injectedImports","contractName","RegExp","test","importExists","importManager","imports","resolvedAddress","accountName","Math","random","pow","toFixed","accountAddress","_Buffer","publicKey","getPublic","rlp","encode","pubFlowKey","events","event","find","makeGetBalance","raw","types","recipient","amount","makeMintTransaction","UFix64","offset","wrappedInteraction","resolves","not","toBe","toThrow","status","errorMessage","rejects"],"mappings":"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"}