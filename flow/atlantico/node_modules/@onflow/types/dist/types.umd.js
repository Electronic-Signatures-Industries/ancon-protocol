!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).types={})}(this,function(e){var t=function(e,t,n){return{label:e,asArgument:t,asInjection:n}},n=function(e){return Array.isArray(e)},r=function(e){return"object"==typeof e},u=function(e){return null==e},i=function(e){return"number"==typeof e},o=function(e){return Number.isInteger(e)},f=function(e){return"string"==typeof e},c=function(e){throw new Error("Type Error: "+e)},a=t("Identity",function(e){return e},function(e){return e}),p=t("UInt",function(e){if(i(e)&&o(e))return{type:"UInt",value:e.toString()};c("Expected Positive Integer for type Unsigned Int")},function(e){return e}),d=t("Int",function(e){if(i(e)&&o(e))return{type:"Int",value:e.toString()};c("Expected Integer for type Int")},function(e){return e}),l=t("UInt8",function(e){if(i(e)&&o(e))return{type:"UInt8",value:e.toString()};c("Expected integer for UInt8")},function(e){return e}),s=t("Int8",function(e){if(i(e)&&o(e))return{type:"Int8",value:e.toString()};c("Expected positive integer for Int8")},function(e){return e}),g=t("UInt16",function(e){if(i(e)&&o(e))return{type:"UInt16",value:e.toString()};c("Expected integer for UInt16")},function(e){return e}),v=t("Int16",function(e){if(i(e)&&o(e))return{type:"Int16",value:e.toString()};c("Expected positive integer for Int16")},function(e){return e}),y=t("UInt32",function(e){if(i(e)&&o(e))return{type:"UInt32",value:e.toString()};c("Expected integer for UInt32")},function(e){return e}),m=t("Int32",function(e){if(i(e)&&o(e))return{type:"Int32",value:e.toString()};c("Expected positive integer for Int32")},function(e){return e}),I=t("UInt64",function(e){if(i(e)&&o(e))return{type:"UInt64",value:e.toString()};c("Expected integer for UInt64")},function(e){return e}),x=t("Int64",function(e){if(i(e)&&o(e))return{type:"Int64",value:e.toString()};c("Expected positive integer for Int64")},function(e){return e}),U=t("UInt128",function(e){if(i(e)&&o(e))return{type:"UInt128",value:e.toString()};c("Expected integer for UInt128")},function(e){return e}),E=t("Int128",function(e){if(i(e)&&o(e))return{type:"Int128",value:e.toString()};c("Expected positive integer for Int128")},function(e){return e}),h=t("UInt256",function(e){if(i(e)&&o(e))return{type:"UInt256",value:e.toString()};c("Expected integer for UInt256")},function(e){return e}),b=t("Int256",function(e){if(i(e)&&o(e))return{type:"Int256",value:e.toString()};c("Expected integer for Int256")},function(e){return e}),S=t("Word8",function(e){if(i(e)&&o(e))return{type:"Word8",value:e.toString()};c("Expected positive number for Word8")},function(e){return e}),A=t("Word16",function(e){if(i(e)&&o(e))return{type:"Word16",value:e.toString()};c("Expected positive number for Word16")},function(e){return e}),F=t("Word32",function(e){if(i(e)&&o(e))return{type:"Word32",value:e.toString()};c("Expected positive number for Word32")},function(e){return e}),W=t("Word64",function(e){if(i(e)&&o(e))return{type:"Word64",value:e.toString()};c("Expected positive number for Word64")},function(e){return e}),w=function(){console.error("\n          %c@onflow/types Deprecation Notice\n          ========================\n\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\n\n          =======================\n        ".replace(/\n\s+/g,"\n").trim(),"font-weight:bold;font-family:monospace;")},j=t("UFix64",function(e){if(f(e)){var t=e.split(".");return 2!==t.length&&c("Expected one decimal but found "+t.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==t[1].length||t[1].length>8)&&c("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+t[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"UFix64",value:e}}if(i(e))return w(),{type:"UFix64",value:e.toString()};c("Expected String for UFix64")},function(e){return e}),k=t("Fix64",function(e){if(f(e)){var t=e.split(".");return 2!==t.length&&c("Expected one decimal but found "+t.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==t[1].length||t[1].length>8)&&c("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+t[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"Fix64",value:e}}if(i(e))return w(),{type:"Fix64",value:e.toString()};c("Expected String for Fix64")},function(e){return e}),R=t("String",function(e){if(f(e))return{type:"String",value:e};c("Expected String for type String")},function(e){return e}),O=t("Character",function(e){if(f(e))return{type:"Character",value:e};c("Expected Character for type Character")},function(e){return e}),N=t("Bool",function(e){if("boolean"==typeof e)return{type:"Bool",value:e};c("Expected Boolean for type Bool")},function(e){return e}),B=t("Address",function(e){if(f(e))return{type:"Address",value:e};c("Expected Address for type Address")},function(e){return e}),C=t("Void",function(e){if(!e||u(e))return{type:"Void"};c("Expected Void for type Void")},function(e){return e}),D=t("Reference",function(e){if(r(e))return{type:"Reference",value:e};c("Expected Object for type Reference")},function(e){return e}),V=function(e){return void 0===e&&(e=[]),t("Array",function(t){return{type:"Array",value:n(e)?e.map(function(e,n){return e.asArgument(t[n])}):t.map(function(t){return e.asArgument(t)})}},function(e){return e})};e.Address=B,e.Array=V,e.Bool=N,e.Character=O,e.Dictionary=function(e){return void 0===e&&(e=[]),t("Dictionary",function(t){if(r(t))return{type:"Dictionary",value:n(e)?e.map(function(e,n){return{key:e.key.asArgument(t[n].key),value:e.value.asArgument(t[n].value)}}):n(t)?t.map(function(t){return{key:e.key.asArgument(t.key),value:e.value.asArgument(t.value)}}):[{key:e.key.asArgument(t.key),value:e.value.asArgument(t.value)}]};c("Expected Object for type Dictionary")},function(e){return e})},e.Event=function(e,u){return void 0===u&&(u=[]),t("Event",function(t){if(r(t))return{type:"Event",value:{id:e,fields:n(u)?u.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(e){return{name:e.name,value:u.value.asArgument(e.value)}})}};c("Expected Object for type Event")},function(e){return e})},e.Fix64=k,e.Identity=a,e.Int=d,e.Int128=E,e.Int16=v,e.Int256=b,e.Int32=m,e.Int64=x,e.Int8=s,e.Optional=function(e){return t("Optional",function(t){return{type:"Optional",value:u(t)?null:e.asArgument(t)}},function(e){return e})},e.Reference=D,e.Resource=function(e,u){return void 0===u&&(u=[]),t("Resource",function(t){if(r(t))return{type:"Resource",value:{id:e,fields:n(u)?u.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(e){return{name:e.name,value:u.value.asArgument(e.value)}})}};c("Expected Object for type Resource")},function(e){return e})},e.String=R,e.Struct=function(e,u){return void 0===u&&(u=[]),t("Struct",function(t){if(r(t))return{type:"Struct",value:{id:e,fields:n(u)?u.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(e){return{name:e.name,value:u.value.asArgument(e.value)}})}};c("Expected Object for type Struct")},function(e){return e})},e.UFix64=j,e.UInt=p,e.UInt128=U,e.UInt16=g,e.UInt256=h,e.UInt32=y,e.UInt64=I,e.UInt8=l,e.Void=C,e.Word16=A,e.Word32=F,e.Word64=W,e.Word8=S,e._Array=V});
//# sourceMappingURL=types.umd.js.map
