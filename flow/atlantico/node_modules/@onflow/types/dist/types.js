var t=function(t,e,n){return{label:t,asArgument:e,asInjection:n}},e=function(t){return Array.isArray(t)},n=function(t){return"object"==typeof t},r=function(t){return null==t},o=function(t){return"number"==typeof t},u=function(t){return Number.isInteger(t)},i=function(t){return"string"==typeof t},f=function(t){throw new Error("Type Error: "+t)},c=t("Identity",function(t){return t},function(t){return t}),a=t("UInt",function(t){if(o(t)&&u(t))return{type:"UInt",value:t.toString()};f("Expected Positive Integer for type Unsigned Int")},function(t){return t}),p=t("Int",function(t){if(o(t)&&u(t))return{type:"Int",value:t.toString()};f("Expected Integer for type Int")},function(t){return t}),s=t("UInt8",function(t){if(o(t)&&u(t))return{type:"UInt8",value:t.toString()};f("Expected integer for UInt8")},function(t){return t}),d=t("Int8",function(t){if(o(t)&&u(t))return{type:"Int8",value:t.toString()};f("Expected positive integer for Int8")},function(t){return t}),l=t("UInt16",function(t){if(o(t)&&u(t))return{type:"UInt16",value:t.toString()};f("Expected integer for UInt16")},function(t){return t}),x=t("Int16",function(t){if(o(t)&&u(t))return{type:"Int16",value:t.toString()};f("Expected positive integer for Int16")},function(t){return t}),g=t("UInt32",function(t){if(o(t)&&u(t))return{type:"UInt32",value:t.toString()};f("Expected integer for UInt32")},function(t){return t}),v=t("Int32",function(t){if(o(t)&&u(t))return{type:"Int32",value:t.toString()};f("Expected positive integer for Int32")},function(t){return t}),y=t("UInt64",function(t){if(o(t)&&u(t))return{type:"UInt64",value:t.toString()};f("Expected integer for UInt64")},function(t){return t}),m=t("Int64",function(t){if(o(t)&&u(t))return{type:"Int64",value:t.toString()};f("Expected positive integer for Int64")},function(t){return t}),I=t("UInt128",function(t){if(o(t)&&u(t))return{type:"UInt128",value:t.toString()};f("Expected integer for UInt128")},function(t){return t}),U=t("Int128",function(t){if(o(t)&&u(t))return{type:"Int128",value:t.toString()};f("Expected positive integer for Int128")},function(t){return t}),E=t("UInt256",function(t){if(o(t)&&u(t))return{type:"UInt256",value:t.toString()};f("Expected integer for UInt256")},function(t){return t}),h=t("Int256",function(t){if(o(t)&&u(t))return{type:"Int256",value:t.toString()};f("Expected integer for Int256")},function(t){return t}),b=t("Word8",function(t){if(o(t)&&u(t))return{type:"Word8",value:t.toString()};f("Expected positive number for Word8")},function(t){return t}),S=t("Word16",function(t){if(o(t)&&u(t))return{type:"Word16",value:t.toString()};f("Expected positive number for Word16")},function(t){return t}),A=t("Word32",function(t){if(o(t)&&u(t))return{type:"Word32",value:t.toString()};f("Expected positive number for Word32")},function(t){return t}),F=t("Word64",function(t){if(o(t)&&u(t))return{type:"Word64",value:t.toString()};f("Expected positive number for Word64")},function(t){return t}),W=function(){console.error("\n          %c@onflow/types Deprecation Notice\n          ========================\n\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\n\n          =======================\n        ".replace(/\n\s+/g,"\n").trim(),"font-weight:bold;font-family:monospace;")},w=t("UFix64",function(t){if(i(t)){var e=t.split(".");return 2!==e.length&&f("Expected one decimal but found "+e.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==e[1].length||e[1].length>8)&&f("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+e[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"UFix64",value:t}}if(o(t))return W(),{type:"UFix64",value:t.toString()};f("Expected String for UFix64")},function(t){return t}),j=t("Fix64",function(t){if(i(t)){var e=t.split(".");return 2!==e.length&&f("Expected one decimal but found "+e.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==e[1].length||e[1].length>8)&&f("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+e[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"Fix64",value:t}}if(o(t))return W(),{type:"Fix64",value:t.toString()};f("Expected String for Fix64")},function(t){return t}),k=t("String",function(t){if(i(t))return{type:"String",value:t};f("Expected String for type String")},function(t){return t}),R=t("Character",function(t){if(i(t))return{type:"Character",value:t};f("Expected Character for type Character")},function(t){return t}),O=t("Bool",function(t){if("boolean"==typeof t)return{type:"Bool",value:t};f("Expected Boolean for type Bool")},function(t){return t}),N=t("Address",function(t){if(i(t))return{type:"Address",value:t};f("Expected Address for type Address")},function(t){return t}),B=t("Void",function(t){if(!t||r(t))return{type:"Void"};f("Expected Void for type Void")},function(t){return t}),C=t("Reference",function(t){if(n(t))return{type:"Reference",value:t};f("Expected Object for type Reference")},function(t){return t}),D=function(n){return void 0===n&&(n=[]),t("Array",function(t){return{type:"Array",value:e(n)?n.map(function(e,n){return e.asArgument(t[n])}):t.map(function(t){return n.asArgument(t)})}},function(t){return t})};exports.Address=N,exports.Array=D,exports.Bool=O,exports.Character=R,exports.Dictionary=function(r){return void 0===r&&(r=[]),t("Dictionary",function(t){if(n(t))return{type:"Dictionary",value:e(r)?r.map(function(e,n){return{key:e.key.asArgument(t[n].key),value:e.value.asArgument(t[n].value)}}):e(t)?t.map(function(t){return{key:r.key.asArgument(t.key),value:r.value.asArgument(t.value)}}):[{key:r.key.asArgument(t.key),value:r.value.asArgument(t.value)}]};f("Expected Object for type Dictionary")},function(t){return t})},exports.Event=function(r,o){return void 0===o&&(o=[]),t("Event",function(t){if(n(t))return{type:"Event",value:{id:r,fields:e(o)?o.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(t){return{name:t.name,value:o.value.asArgument(t.value)}})}};f("Expected Object for type Event")},function(t){return t})},exports.Fix64=j,exports.Identity=c,exports.Int=p,exports.Int128=U,exports.Int16=x,exports.Int256=h,exports.Int32=v,exports.Int64=m,exports.Int8=d,exports.Optional=function(e){return t("Optional",function(t){return{type:"Optional",value:r(t)?null:e.asArgument(t)}},function(t){return t})},exports.Reference=C,exports.Resource=function(r,o){return void 0===o&&(o=[]),t("Resource",function(t){if(n(t))return{type:"Resource",value:{id:r,fields:e(o)?o.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(t){return{name:t.name,value:o.value.asArgument(t.value)}})}};f("Expected Object for type Resource")},function(t){return t})},exports.String=k,exports.Struct=function(r,o){return void 0===o&&(o=[]),t("Struct",function(t){if(n(t))return{type:"Struct",value:{id:r,fields:e(o)?o.map(function(e,n){return{name:t.fields[n].name,value:e.value.asArgument(t.fields[n].value)}}):t.fields.map(function(t){return{name:t.name,value:o.value.asArgument(t.value)}})}};f("Expected Object for type Struct")},function(t){return t})},exports.UFix64=w,exports.UInt=a,exports.UInt128=I,exports.UInt16=l,exports.UInt256=E,exports.UInt32=g,exports.UInt64=y,exports.UInt8=s,exports.Void=B,exports.Word16=S,exports.Word32=A,exports.Word64=F,exports.Word8=b,exports._Array=D;
//# sourceMappingURL=types.js.map
