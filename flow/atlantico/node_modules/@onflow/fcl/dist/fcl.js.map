{"version":3,"file":"fcl.js","sources":["../src/default-config.js","../src/VERSION.js","../src/exec/utils/is.js","../src/exec/utils/normalize-args.js","../src/current-user/normalize/__vsn.js","../src/current-user/normalize/frame.js","../src/current-user/normalize/back-channel-rpc.js","../src/current-user/normalize/service.js","../src/current-user/normalize/pre-authz.js","../src/current-user/normalize/authz.js","../src/current-user/normalize/authn.js","../src/current-user/normalize/open-id.js","../src/current-user/normalize/user-signature.js","../src/current-user/build-user.js","../src/current-user/service-of-type.js","../src/current-user/exec-service/strategies/utils/service-endpoint.js","../src/current-user/exec-service/strategies/utils/fetch-service.js","../src/current-user/normalize/polling-response.js","../src/current-user/exec-service/strategies/utils/render-frame.js","../src/current-user/exec-service/strategies/utils/frame.js","../src/current-user/exec-service/strategies/utils/poll.js","../src/current-user/exec-service/strategies/http-post.js","../src/current-user/exec-service/index.js","../src/current-user/exec-service/strategies/iframe-rpc.js","../src/current-user/normalize/composite-signature.js","../src/current-user/index.js","../src/current-user/fetch-services.js","../src/current-user/merge-services.js","../src/transaction/index.js","../src/events/index.js","../src/fcl.js","../src/exec/mutate.js","../src/exec/query.js","../src/serialize/index.js"],"sourcesContent":["import {config} from \"@onflow/sdk\"\n\nconfig()\n  .put(\"accessNode.api\", \"http://localhost:8080\")\n  .put(\"challenge.handshake\", \"http://localhost:8700/authenticate\")\n","export const VERSION = \"0.0.76\"\n","const is = type => d => typeof d === type\n\nexport const isRequired = d => d != null\nexport const isObject = is(\"object\")\nexport const isString = is(\"string\")\nexport const isFunc = is(\"function\")\nexport const isNumber = is(\"number\")\n","import {isFunc} from \"./is\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\n\nexport function normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(sdk.arg, t)\n  return []\n}\n","export const SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const PROVIDER_PRAGMA = {\n  f_type: \"Provider\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const OPEN_ID_PRAGMA = {\n  f_type: \"OpenId\",\n  f_vsn: \"1.0.0\",\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nexport function normalizeFrame(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nexport function normalizeBackChannelRpc(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {normalizeAuthn} from \"./authn\"\nimport {normalizeAuthz} from \"./authz\"\nimport {normalizePreAuthz} from \"./pre-authz\"\nimport {normalizeFrame} from \"./frame\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeOpenId} from \"./open-id\"\nimport {normalizeUserSignature} from \"./user-signature\"\n\nexport function normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data))\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n}\n\nexport function normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data)\n    return normalized\n  } catch (error) {\n    console.error(\n      `Unrecognized FCL Service Type [${service.type}]`,\n      service,\n      error\n    )\n    return service\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizePreAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nexport function normalizeAuthn(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: withPrefix(service.addr),\n          name: service.name,\n          icon: service.icon,\n        },\n      }\n  }\n}\n","import {SERVICE_PRAGMA, OPEN_ID_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nexport function normalizeOpenId(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return null\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeUserSignature(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid user-signature service\")\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport * as rlp from \"@onflow/rlp\"\nimport {fetchServices} from \"./fetch-services\"\nimport {mergeServices} from \"./merge-services\"\nimport {USER_PRAGMA} from \"./normalize/__vsn\"\nimport {normalizeService} from \"./normalize/service\"\n\nfunction deriveCompositeId(authn) {\n  return rlp\n    .encode([\n      authn.provider.address || authn.provider.name || \"UNSPECIFIED\",\n      authn.id,\n    ])\n    .toString(\"hex\")\n}\n\nfunction normalizeData(data) {\n  data.addr = data.addr ? withPrefix(data.addr) : null\n  data.paddr = data.paddr ? withPrefix(data.paddr) : null\n  return data\n}\n\nfunction findService(type, services) {\n  return services.find(d => d.type === type)\n}\n\nexport async function buildUser(data) {\n  data = normalizeData(data)\n\n  var services = mergeServices(\n    data.services || [],\n    await fetchServices(data.hks, data.code)\n  ).map(service => normalizeService(service, data))\n\n  const authn = findService(\"authn\", services)\n\n  return {\n    ...USER_PRAGMA,\n    addr: withPrefix(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.exp,\n  }\n}\n","export function serviceOfType(services = [], type) {\n  return services.find(service => service.type === type)\n}\n","export function serviceEndpoint(service) {\n  const url = new URL(service.endpoint)\n  url.searchParams.append(\"l6n\", window.location.origin)\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value)\n    }\n  }\n  return url\n}\n","import {serviceEndpoint} from \"./service-endpoint\"\n\nexport function fetchService(service, opts = {}) {\n  const method = opts.method || \"POST\"\n  const body =\n    method === \"GET\"\n      ? undefined\n      : JSON.stringify(opts.data || service.data || {})\n\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\",\n    },\n    body: body,\n  }).then((d) => d.json())\n}\n","import {POLLING_RESPONSE_PRAGMA} from \"./__vsn\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeFrame} from \"./frame\"\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nexport function normalizePollingResponse(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status,\n        reason: resp.reason,\n        data: resp.compositeSignature || resp.data || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0]),\n      }\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100vh;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *; hid *\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame, unmount]\n}\n","import {renderFrame} from \"./render-frame\"\nimport {serviceEndpoint} from \"./service-endpoint\"\n\nconst CLOSE_EVENT = \"FCL:FRAME:CLOSE\"\nconst READY_EVENT = \"FCL:FRAME:READY\"\nconst RESPONSE_EVENT = \"FCL:FRAME:RESPONSE\"\nconst OPEN_EVENT = \"FCL:FRAME:OPEN\"\n\nconst noop = () => {}\n\nconst IGNORE = new Set([\n  \"monetizationstart\",\n  \"monetizationpending\",\n  \"monetizationprogress\",\n  \"monetizationstop\",\n])\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  var tab = null\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  window.addEventListener(\"message\", internal)\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function internal(e) {\n    try {\n      if (typeof e.data !== \"object\") return\n      if (IGNORE.has(e.data.type)) return\n      if (e.data.type === CLOSE_EVENT) close()\n      if (e.data.type === READY_EVENT) onReady(e, {send, close})\n      if (e.data.type === RESPONSE_EVENT) onResponse(e, {send, close})\n      onMessage(e, {send, close})\n\n      // Backwards Compatible\n      if (e.data.type === \"FCL::CHALLENGE::RESPONSE\") {\n        onResponse(e, {send, close})\n      }\n      if (e.data.type === \"FCL::AUTHZ_READY\") onReady(e, {send, close})\n      if (e.data.type === \"FCL::CHALLENGE::CANCEL\") close()\n      if (e.data.type === \"FCL::CANCEL\") close()\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error)\n      close()\n    }\n  }\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", internal)\n      if (tab != null) tab.close()\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $frame.contentWindow.postMessage(\n        JSON.parse(JSON.stringify(msg || {})),\n        \"*\"\n      )\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n\n  function open(msg) {\n    try {\n      tab = window.open(msg.endpoint)\n      tab.focus()\n    } catch (error) {\n      console.error(\"Frame Open Error\", msg, error)\n    }\n  }\n}\n","import {normalizePollingResponse} from \"../../../normalize/polling-response\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {fetchService} from \"./fetch-service\"\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\",\n}\n\nconst serviceMethod = service => {\n  invariant(\n    OPTIONS[service.method],\n    \"Invalid Service Method for type back-channel-rpc\",\n    {service}\n  )\n  return OPTIONS[service.method]\n}\n\nconst serviceBody = service => {\n  if (service.method === \"HTTP/GET\") return undefined\n  if (service.method === \"HTTP/POST\" && service.data != null)\n    return JSON.stringify(service.data)\n  return undefined\n}\n\nexport async function poll(service, canContinue = () => true) {\n  invariant(service, \"Missing Polling Service\", {service})\n  if (!canContinue()) throw new Error(\"Externally Halted\")\n\n  const resp = await fetchService(service, {\n    method: serviceMethod(service),\n  }).then(normalizePollingResponse)\n\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n    default:\n      await new Promise(r => setTimeout(r, 500))\n      return poll(resp.updates, canContinue)\n  }\n}\n","import {fetchService} from \"./utils/fetch-service\"\nimport {serviceEndpoint} from \"./utils/service-endpoint\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {frame} from \"./utils/frame\"\nimport {poll} from \"./utils/poll\"\n\nexport async function execHttpPost(service, signable, opts) {\n  signable.data = service.data\n  const resp = await fetchService(service, {\n    data: signable,\n  }).then(normalizePollingResponse)\n\n  if (resp.status === \"APPROVED\") {\n    return resp.data\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n  } else if (resp.status === \"PENDING\") {\n    var canContinue = true\n    const {close: closeFrame} = frame(resp.local, {\n      onClose() {\n        canContinue = false\n      },\n    })\n\n    return poll(resp.updates, () => canContinue)\n      .then(serviceResponse => {\n        closeFrame()\n        return serviceResponse\n      })\n      .catch(error => {\n        console.error(error)\n        closeFrame()\n        throw error\n      })\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {service, resp})\n    throw new Error(`Auto Decline: Invalid Response`)\n  }\n}\n","import {execHttpPost} from \"./strategies/http-post\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\n\nconst STRATEGIES = {\n  \"HTTP/RPC\": execHttpPost,\n  \"HTTP/POST\": execHttpPost,\n  \"IFRAME/RPC\": execIframeRPC,\n}\n\nexport async function execService(service, msg, opts = {}) {\n  try {\n    return STRATEGIES[service.method](service, msg, opts)\n  } catch (error) {\n    console.error(\"execService(service, msg)\", error, {service, msg, opts})\n    throw error\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\n\nexport function execIframeRPC(service, body, opts) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall\n\n    body.data = service.data\n\n    frame(service, {\n      onReady(_, {send}) {\n        try {\n          send({\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {send, close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {COMPOSITE_SIGNATURE_PRAGMA} from \"./__vsn\"\nimport {sansPrefix} from \"@onflow/util-address\"\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nexport function normalizeCompositeSignature(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: sansPrefix(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId,\n      }\n  }\n}\n","import \"../default-config\"\nimport {account, config} from \"@onflow/sdk\"\nimport {spawn, send, INIT, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {buildUser} from \"./build-user\"\nimport {serviceOfType} from \"./service-of-type\"\nimport {execService} from \"./exec-service\"\nimport {frame} from \"./exec-service/strategies/utils/frame\"\nimport {normalizeCompositeSignature} from \"./normalize/composite-signature\"\n\nconst NAME = \"CURRENT_USER\"\nconst UPDATED = \"CURRENT_USER/UPDATED\"\nconst SNAPSHOT = \"SNAPSHOT\"\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\"\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\"\n\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`\n\nconst coldStorage = {\n  get: async () => {\n    const fallback = JSON.parse(DATA)\n    const stored = JSON.parse(sessionStorage.getItem(NAME))\n    if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n      sessionStorage.removeItem(NAME)\n      return fallback\n    }\n    return stored || fallback\n  },\n  put: async data => {\n    sessionStorage.setItem(NAME, JSON.stringify(data))\n    return data\n  },\n}\n\nconst canColdStorage = () => {\n  return config().get(\"persistSession\", true)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) {\n      const user = await coldStorage.get()\n      if (notExpired(user)) ctx.merge(user)\n    }\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data)\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n}\n\nconst identity = v => v\nconst spawnCurrentUser = () => spawn(HANDLERS, NAME)\n\nfunction notExpired(user) {\n  return (\n    user.expiresAt == null ||\n    user.expiresAt === 0 ||\n    user.expiresAt > Date.now()\n  )\n}\n\nasync function configLens(regex) {\n  return Object.fromEntries(\n    Object.entries(await config().where(regex)).map(([key, value]) => [\n      key.replace(regex, \"\"),\n      value,\n    ])\n  )\n}\n\nasync function authenticate(opts = {}) {\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser()\n    const user = await snapshot()\n    if (user.loggedIn && notExpired(user)) return resolve(user)\n    const serviceStrategy = opts.serviceStrategy || frame\n\n    serviceStrategy(\n      {\n        endpoint: await config.first([\n          \"discovery.wallet\",\n          \"challenge.handshake\",\n        ]),\n      },\n      {\n        async onReady(e, {send, close}) {\n          send({\n            type: \"FCL:AUTHN:CONFIG\",\n            services: await configLens(/^service\\./),\n            app: await configLens(/^app\\.detail\\./),\n          })\n        },\n        async onClose() {\n          resolve(await snapshot())\n        },\n        async onResponse(e, {close}) {\n          send(NAME, SET_CURRENT_USER, await buildUser(e.data))\n          resolve(await snapshot())\n          close()\n        },\n      }\n    )\n  })\n}\n\nfunction unauthenticate() {\n  spawnCurrentUser()\n  send(NAME, DEL_CURRENT_USER)\n}\n\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || [],\n})\n\nfunction resolvePreAuthz(authz) {\n  const resp = normalizePreAuthzResponse(authz)\n  const axs = []\n\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer])\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az])\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az])\n\n  var result = axs.map(([role, az]) => ({\n    tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n    addr: az.identity.address,\n    keyId: az.identity.keyId,\n    signingFunction(signable) {\n      return execService(az, signable)\n    },\n    role: {\n      proposer: role === \"PROPOSER\",\n      payer: role === \"PAYER\",\n      authorizer: role === \"AUTHORIZER\",\n    },\n  }))\n  return result\n}\n\nasync function authorization(account) {\n  spawnCurrentUser()\n  const user = await authenticate()\n  const authz = serviceOfType(user.services, \"authz\")\n\n  const preAuthz = serviceOfType(user.services, \"pre-authz\")\n  if (preAuthz) {\n    return {\n      ...account,\n      tempId: \"CURRENT_USER\",\n      async resolve(account, preSignable) {\n        return resolvePreAuthz(await execService(preAuthz, preSignable))\n      },\n    }\n  }\n\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    resolve: null,\n    addr: sansPrefix(authz.identity.address),\n    keyId: authz.identity.keyId,\n    sequenceNum: null,\n    signature: null,\n    async signingFunction(signable) {\n      return normalizeCompositeSignature(\n        await execService(authz, signable, {\n          includeOlderJsonRpcCall: true,\n        })\n      )\n    },\n  }\n}\n\nfunction subscribe(callback) {\n  spawnCurrentUser()\n  const EXIT = \"@EXIT\"\n  const self = spawn(async ctx => {\n    ctx.send(NAME, SUBSCRIBE)\n    while (1) {\n      const letter = await ctx.receive()\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, UNSUBSCRIBE)\n        return\n      }\n      callback(letter.data)\n    }\n  })\n  return () => send(self, EXIT)\n}\n\nfunction snapshot() {\n  spawnCurrentUser()\n  return send(NAME, SNAPSHOT, null, {expectReply: true, timeout: 0})\n}\n\nasync function info() {\n  spawnCurrentUser()\n  const {addr} = await snapshot()\n  if (addr == null) throw new Error(\"No Flow Address for Current User\")\n  return account(addr)\n}\n\nconst makeSignable = msg => {\n  invariant(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\")\n\n  return {\n    message: msg,\n  }\n}\n\nasync function signUserMessage(msg, opts = {}) {\n  spawnCurrentUser()\n  const user = await authenticate(opts)\n  const signingService = serviceOfType(user.services, \"user-signature\")\n\n  invariant(\n    signingService,\n    \"Current user must have authorized a signing service.\"\n  )\n\n  try {\n    const data = await execService(signingService, makeSignable(msg))\n    if (Array.isArray(data)) {\n      return data.map(compSigs => normalizeCompositeSignature(compSigs))\n    } else {\n      return [normalizeCompositeSignature(data)]\n    }\n  } catch (error) {\n    return error\n  }\n}\n\nconst VERIFY_SIG_SCRIPT = `\nimport Crypto\n    \npub fun main(\n  message: String,\n  rawPublicKeys: [String],\n  weights: [UFix64],\n  signAlgos: [UInt],\n  signatures: [String],\n): Bool {\n\n  let keyList = Crypto.KeyList()\n  \n  var i = 0\n  for rawPublicKey in rawPublicKeys {\n    keyList.add(\n      PublicKey(\n        publicKey: rawPublicKey.decodeHex(),\n        signatureAlgorithm: signAlgos[i] == 2 ? SignatureAlgorithm.ECDSA_P256 : SignatureAlgorithm.ECDSA_secp256k1 \n      ),\n      hashAlgorithm: HashAlgorithm.SHA3_256,\n      weight: weights[i],\n    )\n    i = i + 1\n  }\n\n  let signatureSet: [Crypto.KeyListSignature] = []\n\n  var j = 0\n  for signature in signatures {\n    signatureSet.append(\n      Crypto.KeyListSignature(\n        keyIndex: j,\n        signature: signature.decodeHex()\n      )\n    )\n    j = j + 1\n  }\n    \n  let signedData = message.decodeHex()\n  \n  return keyList.verify(\n    signatureSet: signatureSet,\n    signedData: signedData\n  )\n}\n`\n\nasync function verifyUserSignatures(msg, compSigs) {\n  invariant(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\")\n  invariant(\n    Array.isArray(compSigs),\n    \"Must include an Array of composite signatures\"\n  )\n\n  let weights = []\n  let signAlgos = []\n  let signatures = []\n  const rawPubKeys = await Promise.all(\n    compSigs.map(async cs => {\n      invariant(typeof cs.addr === \"string\", \"addr must be a string\")\n      invariant(typeof cs.keyId === \"number\", \"keyId must be a number\")\n      invariant(typeof cs.signature === \"string\", \"signature must be a string\")\n\n      try {\n        const account = await account(cs.addr)\n        weights.push(account.keys[cs.keyId].weight.toFixed(1))\n        signAlgos.push(account.keys[cs.keyId].signAlgo)\n        signatures.push(cs.signature)\n        return account.keys[cs.keyId].publicKey\n      } catch (err) {\n        throw err\n      }\n    })\n  )\n\n  return await fcl.query({\n    cadence: `${VERIFY_SIG_SCRIPT}`,\n    args: (arg, t) => [\n      arg(msg, t.String),\n      arg(rawPubKeys, t.Array([t.String])),\n      arg(weights, t.Array(t.UFix64)),\n      arg(signAlgos, t.Array([t.UInt])),\n      arg(signatures, t.Array([t.String])),\n    ],\n  })\n}\n\nexport const currentUser = () => {\n  return {\n    authenticate,\n    unauthenticate,\n    authorization,\n    signUserMessage,\n    verifyUserSignatures,\n    subscribe,\n    snapshot,\n  }\n}\n","export async function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return []\n\n  const url = new URL(servicesURL)\n  url.searchParams.append(\"code\", code)\n\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then(d => d.json())\n\n  if (Array.isArray(resp)) return resp\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = []\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service,\n      })\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider,\n    })\n  }\n\n  return services\n}\n","import {withPrefix} from \"@onflow/util-address\"\n\nexport function mergeServices(sx1 = [], sx2 = []) {\n  // TODO: Make this smarter\n  return [...sx1, ...sx2]\n}\n","import \"../default-config\"\nimport {\n  spawn,\n  send,\n  subscriber,\n  snapshoter,\n  UPDATED,\n  SNAPSHOT,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n} from \"@onflow/util-actor\"\nimport {send as fclSend, decode, getTransactionStatus} from \"@onflow/sdk\"\n\nconst RATE = 2500\nconst POLL = \"POLL\"\n\nconst fetchTxStatus = async transactionId => {\n  return fclSend([getTransactionStatus(transactionId)]).then(decode)\n}\n\nconst isExpired = tx => tx.status === 5\nconst isSealed = tx => tx.status >= 4\nconst isExecuted = tx => tx.status >= 3\nconst isFinalized = tx => tx.status >= 2\nconst isPending = tx => tx.status >= 1\nconst isUnknown = tx => tx.status >= 0\n\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    ctx.merge(tx)\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, ctx.all())\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all())\n  },\n  [POLL]: async ctx => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(UPDATED, tx)\n    ctx.merge(tx)\n  },\n}\n\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\")\n    transactionId = transactionId.transactionId\n  if (transactionId == null) throw new Error(\"transactionId required\")\n  return transactionId\n}\n\nconst spawnTransaction = transactionId => {\n  return spawn(HANDLERS, scoped(transactionId))\n}\n\nexport function transaction(transactionId) {\n  function snapshot() {\n    return snapshoter(transactionId, spawnTransaction)\n  }\n\n  function subscribe(callback) {\n    return subscriber(scoped(transactionId), spawnTransaction, callback)\n  }\n\n  function once(predicate) {\n    return function innerOnce(opts = {}) {\n      const suppress = opts.suppress || false\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe(txStatus => {\n          if (txStatus.statusCode && !suppress) {\n            reject(txStatus.errorMessage)\n            unsub()\n          } else if (predicate(txStatus)) {\n            resolve(txStatus)\n            unsub()\n          }\n        })\n      })\n    }\n  }\n\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed),\n  }\n}\n\ntransaction.isUnknown = isUnknown\ntransaction.isPending = isPending\ntransaction.isFinalized = isFinalized\ntransaction.isExecuted = isExecuted\ntransaction.isSealed = isSealed\ntransaction.isExpired = isExpired\n","import {spawn, subscriber, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {config, latestBlock} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nimport {send} from \"@onflow/sdk\"\nimport {decode} from \"@onflow/sdk\"\n\nconst RATE = 10000\nconst UPDATED = \"UPDATED\"\nconst TICK = \"TICK\"\n\nconst scheduleTick = async ctx => {\n  return setTimeout(\n    () => ctx.sendSelf(TICK),\n    await config().get(\"fcl.eventPollRate\", RATE)\n  )\n}\n\nconst HANDLERS = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return\n    let hwm = ctx.get(\"hwm\")\n    if (hwm == null) {\n      ctx.put(\"hwm\", await latestBlock())\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    } else {\n      let next = await latestBlock()\n      ctx.put(\"hwm\", next)\n      const data = await send([\n        getEvents(ctx.self(), hwm.height, next.height - 1),\n      ]).then(decode)\n      for (let d of data) ctx.broadcast(UPDATED, d.data)\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n  },\n  [SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n    ctx.subscribe(letter.from)\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(\"tick\"))\n      ctx.delete(\"tick\")\n      ctx.delete(\"hwm\")\n    }\n  },\n}\n\nconst spawnEvents = key => spawn(HANDLERS, key)\n\nexport function events(key) {\n  return {\n    subscribe: callback => subscriber(key, spawnEvents, callback),\n  }\n}\n","import \"./default-config\"\nexport {VERSION} from \"./VERSION\"\nexport {query} from \"./exec/query\"\nexport {mutate} from \"./exec/mutate\"\nexport {serialize} from \"./serialize\"\nexport {transaction as tx} from \"./transaction\"\nexport {events} from \"./events\"\n\nimport {currentUser} from \"./current-user\"\nexport {currentUser}\n\nexport const authenticate = opts => currentUser().authenticate(opts)\nexport const unauthenticate = () => currentUser().unauthenticate()\nexport const reauthenticate = () => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate()\n}\nexport const signUp = opts => currentUser().authenticate()\nexport const logIn = opts => currentUser().authenticate()\n\nexport const authz = currentUser().authorization\n\nimport * as types from \"@onflow/types\"\nexport const t = types\n\nexport {TestUtils} from \"@onflow/sdk\"\nexport {config} from \"@onflow/sdk\"\nexport {send} from \"@onflow/sdk\"\nexport {decode} from \"@onflow/sdk\"\nexport {account} from \"@onflow/sdk\"\nexport {latestBlock} from \"@onflow/sdk\"\nexport {isOk, isBad, why, pipe, build} from \"@onflow/sdk\"\nexport {withPrefix, sansPrefix, display} from \"@onflow/util-address\"\nexport {template as cadence} from \"@onflow/util-template\"\nexport {template as cdc} from \"@onflow/util-template\"\nexport {createSignableVoucher} from \"@onflow/sdk\"\n\n// builders\nexport {transaction} from \"@onflow/sdk\"\nexport {script} from \"@onflow/sdk\"\nexport {ping} from \"@onflow/sdk\"\nexport {atBlockHeight} from \"@onflow/sdk\"\nexport {atBlockId} from \"@onflow/sdk\"\nexport {getAccount} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nexport {getEventsAtBlockHeightRange} from \"@onflow/sdk\"\nexport {getEventsAtBlockIds} from \"@onflow/sdk\"\nexport {getLatestBlock} from \"@onflow/sdk\"\nexport {getBlock} from \"@onflow/sdk\"\nexport {getBlockHeader} from \"@onflow/sdk\"\nexport {getBlockById} from \"@onflow/sdk\"\nexport {getBlockByHeight} from \"@onflow/sdk\"\nexport {getCollection} from \"@onflow/sdk\"\nexport {getTransactionStatus} from \"@onflow/sdk\"\nexport {getTransaction} from \"@onflow/sdk\"\nexport {authorizations, authorization} from \"@onflow/sdk\"\nexport {args, arg} from \"@onflow/sdk\"\nexport {proposer} from \"@onflow/sdk\"\nexport {payer} from \"@onflow/sdk\"\nexport {limit} from \"@onflow/sdk\"\nexport {ref} from \"@onflow/sdk\"\nexport {params, param} from \"@onflow/sdk\"\nexport {validator} from \"@onflow/sdk\"\nexport {invariant} from \"@onflow/sdk\"\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString, isFunc, isNumber} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\nimport {currentUser} from \"../current-user\"\nimport {transaction} from \"../transaction\"\n\n/** As the current user Mutate the Flow Blockchain\n *\n *  @arg {Object} opts - Mutation Options and configuration\n *  @arg {string} opts.cadence - Cadence Transaction used to mutate Flow\n *  @arg {ArgsFn} opts.args - Arguments passed to cadence transaction\n *  @arg {number} opts.limit - Compute Limit for transaction\n *  @returns {string} Transaction Id\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    fcl.mutate({\n *      cadence: `\n *        transaction(a: Int, b: Int, c: Address) {\n *          prepare(acct: AuthAccount) {\n *            log(acct)\n *            log(a)\n *            log(b)\n *            log(c)\n *          }\n *        }\n *      `,\n *      args: (arg, t) => [\n *        arg(6, t.Int),\n *        arg(7, t.Int),\n *        arg(\"0xba1132bc08f82fe2\", t.Address),\n *      ],\n *    })\n *\n *\n *  Options:\n *    type Options = {\n *      cadence: String!,\n *      args: (arg, t) => Array<Arg>,\n *      limit: Number,\n *      authz: AuthzFn, // will overload the trinity of signatory roles\n *      proposer: AuthzFn, // will overload the proposer signatory role\n *      payer: AuthzFn, // will overload the payer signatory role\n *      authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n *    }\n */\n\nconst noop = () => {}\n\nexport async function mutate(opts = {}) {\n  var txid\n  try {\n    await prepMutation(opts)\n\n    // Allow for a config to overwrite the authorization function.\n    // prettier-ignore\n    const authz = await sdk.config().get(\"fcl.authz\", currentUser().authorization)\n\n    // prettier-ignore\n    txid = sdk.send([\n      sdk.transaction(opts.cadence),\n\n      sdk.args(normalizeArgs(opts.args || [])),\n\n      opts.limit && isNumber(opts.limit) && sdk.limit(opts.limit),\n\n      // opts.proposer > opts.authz > authz\n      sdk.proposer(opts.proposer || opts.authz || authz),\n\n      // opts.payer > opts.authz > authz\n      sdk.payer(opts.payer || opts.authz || authz),\n\n      // opts.authorizations > [opts.authz > authz]\n      sdk.authorizations(opts.authorizations || [opts.authz || authz]),\n    ]).then(sdk.decode)\n\n    return txid\n  } catch (error) {\n    throw error\n  }\n}\n\nasync function prepMutation(opts) {\n  // prettier-ignore\n  invariant(isRequired(opts), \"mutate(opts) -- opts is required\")\n  // prettier-ignore\n  invariant(isObject(opts), \"mutate(opts) -- opts must be an object\")\n  // prettier-ignore\n  invariant(isRequired(opts.cadence), \"mutate({ cadence }) -- cadence is required\")\n  // prettier-ignore\n  invariant(isString(opts.cadence), \"mutate({ cadence }) -- cadence must be a string\")\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\nimport {isRequired, isObject, isString, isFunc} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\n\n/** Query the Flow Blockchain\n *\n *  @arg {Object} opts         - Query Options and configuration\n *  @arg {string} opts.cadence - Cadence Script used to query Flow\n *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script\n *  @arg {number} opts.limit   - Compute Limit for Query\n *  @returns {Promise<Response>}\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nexport async function query(opts = {}) {\n  await preQuery(opts)\n\n  // prettier-ignore\n  return sdk.send([\n    sdk.script(opts.cadence),\n    sdk.args(normalizeArgs(opts.args || [])),\n    opts.limit && typeof opts.limit === \"number\" && sdk.limit(opts.limit)\n  ]).then(sdk.decode)\n}\n\nasync function preQuery(opts) {\n  invariant(\n    isRequired(opts.cadence),\n    \"query({ cadence }) -- cadence is required\"\n  )\n\n  invariant(\n    isString(opts.cadence),\n    \"query({ cadence }) -- cadence must be a string\"\n  )\n}\n","import {interaction, pipe} from \"@onflow/sdk\"\nimport {resolve as defaultResolve} from \"@onflow/sdk\"\nimport {config, createSignableVoucher} from \"@onflow/sdk\"\n\nexport const serialize = async (args = [], opts = {}) => {\n  const resolveFunction = await config.first(\n    [\"sdk.resolve\"],\n    opts.resolve || defaultResolve\n  )\n\n  if (Array.isArray(args)) args = await pipe(interaction(), args)\n\n  return JSON.stringify(\n    createSignableVoucher(await resolveFunction(args)),\n    null,\n    2\n  )\n}\n"],"names":["config","put","VERSION","is","type","d","isRequired","isObject","isString","isFunc","isNumber","normalizeArgs","ax","sdk","arg","t","SERVICE_PRAGMA","f_type","f_vsn","IDENTITY_PRAGMA","USER_PRAGMA","POLLING_RESPONSE_PRAGMA","COMPOSITE_SIGNATURE_PRAGMA","normalizeFrame","service","old","endpoint","params","data","normalizeBackChannelRpc","method","serviceNormalizers","back-channel-rpc","pre-authz","uid","id","identity","address","withPrefix","addr","keyId","authz","authn","pid","provider","name","icon","frame","open-id","user-signature","Error","deriveCompositeId","rlp","encode","toString","serviceOfType","services","find","serviceEndpoint","url","URL","searchParams","append","window","location","origin","Object","entries","fetchService","opts","body","undefined","JSON","stringify","fetch","headers","Content-Type","then","json","normalizePollingResponse","resp","status","reason","compositeSignature","updates","authorizationUpdates","local","FRAME","noop","IGNORE","Set","send","close","onClose","onMessage","onReady","onResponse","addEventListener","internal","src","invariant","document","getElementById","$frame","createElement","allow","frameBorder","style","cssText","remove","renderFrame","unmount","e","has","error","console","removeEventListener","msg","contentWindow","postMessage","parse","poll","canContinue","serviceMethod","Promise","r","setTimeout","OPTIONS","HTTP/GET","HTTP/POST","execHttpPost","signable","closeFrame","serviceResponse","execService","STRATEGIES","HTTP/RPC","IFRAME/RPC","resolve","reject","includeOlderJsonRpcCall","_","jsonrpc","result","normalizeCompositeSignature","sansPrefix","signature","sig","pact","state","value","s","o","_settle","bind","v","observer","_catch","recover","verifyUserSignatures","compSigs","test","Array","isArray","weights","signAlgos","signatures","all","map","cs","account","push","keys","weight","toFixed","signAlgo","publicKey","err","rawPubKeys","fcl","query","cadence","VERIFY_SIG_SCRIPT","args","String","UFix64","UInt","signUserMessage","spawnCurrentUser","authenticate","user","signingService","makeSignable","authorization","preAuthz","tempId","preSignable","resolvePreAuthz","sequenceNum","signingFunction","_Pact","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","snapshot","loggedIn","notExpired","serviceStrategy","first","configLens","app","paddr","normalizeData","servicesURL","code","authorizations","fetchServices","hks","sx1","sx2","normalizeService","findService","cid","expiresAt","exp","buildUser","NAME","SET_CURRENT_USER","regex","where","fromEntries","replace","UPDATED","DATA","coldStorage","sessionStorage","setItem","canColdStorage","get","HANDLERS","INIT","ctx","merge","fallback","stored","getItem","removeItem","SUBSCRIBE","letter","subscribe","from","UNSUBSCRIBE","unsubscribe","reply","broadcast","spawn","Date","now","unauthenticate","proposer","payer","normalizePreAuthzResponse","axs","role","az","join","authorizer","EXIT","self","update","stage","shouldContinue","_resumeAfterTest","_resumeAfterBody","updateValue","receive","tag","_exit2","expectReply","timeout","message","currentUser","fetchTxStatus","transactionId","fclSend","getTransactionStatus","decode","isSealed","tx","isExecuted","isFinalized","sendSelf","SNAPSHOT","cur","next","scoped","spawnTransaction","transaction","subscriber","once","predicate","suppress","unsub","txStatus","statusCode","errorMessage","snapshoter","onceFinalized","onceExecuted","onceSealed","isUnknown","isPending","isExpired","scheduleTick","hasSubs","hwm","latestBlock","_put4","_put2","getEvents","height","_put3","_put6","clearTimeout","spawnEvents","key","types","prepMutation","limit","preQuery","script","defaultResolve","resolveFunction","createSignableVoucher","pipe","interaction"],"mappings":"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"}