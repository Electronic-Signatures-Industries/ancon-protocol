{"version":3,"file":"main.modern.js","sources":["../src/env.js","../src/imports.js","../src/strings.js","../src/parser.js","../src/type-checker.js","../src/args.js","../src/fixer.js","../src/interactions.js"],"sourcesContent":["/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { config } from \"@onflow/config\";\n\nexport const DEPLOYED_CONTRACTS = {\n  emulator: {\n    FlowToken: \"0xee82856bf20e2aa6\",\n    FungibleToken: \"0x0ae53cb6e3f42a79\",\n  },\n  testnet: {\n    FlowToken: \"0x7e60df042a9c0868\",\n    FungibleToken: \"0x9a0766d93b6608b7\",\n    LockedTokens: \"0x95e019a17d0e23d7\",\n    StakingProxy: \"0x7aad92e5a0715d21\",\n    FUSD: \"0xe223d8a629e49c68\"\n  },\n  mainnet: {\n    FlowToken: \"0x1654653399040a61\",\n    FungibleToken: \"0xf233dcee88fe0abe\",\n    LockedTokens: \"0x8d0e87b65159ae63\",\n    StakingProxy: \"0x62430cf28c26d095\",\n    FUSD: \"0x3c5959b568896393\"\n  },\n};\n\nexport const ACCESS_NODES = {\n  mainnet: \"https://access-mainnet-beta.onflow.org\",\n  testnet: \"https://access-testnet.onflow.org\",\n  emulator: \"http://localhost:8080\",\n};\n\nexport const getEnvironment = async () => {\n  const env = (await config().get(\"ix.env\")) || \"emulator\";\n  return DEPLOYED_CONTRACTS[env] || DEPLOYED_CONTRACTS.emulator;\n};\n\nexport const setEnvironment = async (networkName = \"emulator\", options = {}) => {\n  const network = networkName.toLowerCase();\n\n  if (!DEPLOYED_CONTRACTS[network]) {\n    throw new Error(\n      `Provided value \"${network}\" is not supported. Try \"emulator\", \"testnet\" or \"mainnet\". Default: \"emulator\"`\n    );\n  }\n\n  const { port, endpoint, limit } = options;\n  const portBased =\n    network === \"emulator\" && port ? `http://localhost:${port}` : ACCESS_NODES[network];\n  const accessNode = endpoint || portBased;\n\n  await config().put(\"ix.env\", network);\n\n  if(limit){\n    await config().put(\"ix.executionLimit\", limit);\n  }\n\n  await config().put(\"accessNode.api\", accessNode);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\n/**\n * Returns list of missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const missingImports = (code, addressMap = {}) => {\n  const importsList = extractImports(code);\n  const missing = [];\n\n  for (const key in importsList) {\n    if (!addressMap[key] && Object.prototype.hasOwnProperty.call(importsList, key)) {\n      missing.push(key);\n    }\n  }\n\n  return missing;\n};\n\n/**\n * Reports missing imports.\n * @param {Array.<string>} list - list of missing imports\n * @param {string} prefix - error message prefix\n */\nexport const report = (list = [], prefix = \"\") => {\n  const errorMessage = `Missing imports for contracts:`;\n  const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n  console.error(message, list);\n};\n\n/**\n * Reports missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param {string} [prefix] - prefix to add to error message\n */\nexport const reportMissingImports = (code, addressMap, prefix = \"\") => {\n  const list = missingImports(code, addressMap);\n  if (list.length > 0) {\n    report(list, prefix);\n  }\n};\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n\n    // If the address is not inside addressMap we shall not alter import statement\n    const validAddress = newAddress || address;\n    return `${imp}${contract} from ${validAddress}`;\n  });\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const capitalizeFirstLetter = (input) => {\n  const [first] = input.split(\"\");\n  return first.toUpperCase() + input.slice(1);\n};\n\nexport const underscoreToCamelCase = (text) => {\n  return text\n    .replace(/-/g, \"_\")\n    .split(\"_\")\n    .map((word, i) => (i > 0 ? capitalizeFirstLetter(word) : word))\n    .join(\"\");\n};\n\nexport const trimAndSplit = (input, trimWith, splitBy) => {\n  if (splitBy) {\n    return input.replace(trimWith, \"\").split(splitBy);\n  }\n  return input.replace(trimWith, \"\").split(getSplitCharacter(input));\n};\n\nexport const getSplitCharacter = (input) => {\n  switch (true) {\n    case input.indexOf(\"//\") >= 0:\n      return \"//\";\n    case input.indexOf(\"/\") >= 0:\n      return \"/\";\n    case input.indexOf(\"\\\\\") >= 0:\n      return \"\\\\\";\n    default:\n      return \"\";\n  }\n};\n\nexport const collapseSpaces = (input) => input.replace(/\\s+/g, \" \");\nexport const removeSpaces = (input) => input.replace(/\\s+/g, \"\");\nexport const stripNewLines = (input) => input.replace(/\\r\\n|\\n|\\r/g, \" \");\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { collapseSpaces } from \"./strings\";\n\nexport const CONTRACT = \"contract\";\nexport const TRANSACTION = \"transaction\";\nexport const SCRIPT = \"script\";\nexport const UNKNOWN = \"unknown\";\n\nexport const generateSchema = (argsDefinition) =>\n  argsDefinition\n    .split(\",\")\n    .map((item) => item.replace(/\\s*/g, \"\"))\n    .filter((item) => item !== \"\");\n\nexport const stripComments = code => {\n  const commentsRegExp = /(\\/\\*[\\s\\S]*?\\*\\/)|(\\/\\/.*)/g\n  return code.replace(commentsRegExp, \"\");\n}\n\nexport const extract = (code, keyWord) => {\n  const noComments = stripComments(code)\n  const target = collapseSpaces(noComments.replace(/[\\n\\r]/g, \"\"));\n\n  if (target) {\n    const regexp = new RegExp(keyWord, \"g\");\n    const match = regexp.exec(target);\n\n    if (match) {\n      if (match[1] === \"\") {\n        return [];\n      }\n      return generateSchema(match[1]);\n    }\n  }\n  return [];\n};\n\nexport const extractSigners = (code) => {\n  return extract(code, `(?:prepare\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractScriptArguments = (code) => {\n  return extract(code, `(?:fun\\\\s+main\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractTransactionArguments = (code) => {\n  return extract(code, `(?:transaction\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractContractName = (code) => {\n  const contractNameMatcher = /\\w+\\s+contract\\s+(?:interface)*\\s*(\\w*)/g;\n  const noComments = stripComments(code)\n  const singleLine = noComments.replace(/\\r\\n|\\n|\\r/g, \" \");\n  const matches = contractNameMatcher.exec(singleLine);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return matches[1];\n};\n\nexport const extractContractParameters = (code) => {\n  const complexMatcher = /(resource|struct)\\s+\\w+\\s*{[\\s\\S]+?}/g;\n  const contractNameMatcher =\n    /(?:access\\(\\w+\\)|pub)\\s+contract\\s+(?:interface)*\\s*(\\w*)(\\s*{[.\\s\\S]*init\\s*\\((.*?)\\)[.\\s\\S]*})?/g;\n\n  const noComments = stripComments(code)\n  const noComplex = noComments.replace(complexMatcher, \"\");\n  const matches = contractNameMatcher.exec(noComplex);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return {\n    contractName: matches[1],\n    args: matches[3] || \"\",\n  };\n};\n\nexport const getTemplateInfo = (template) => {\n  const contractMatcher = /\\w+\\s+contract\\s+(\\w*\\s*)\\w*/g;\n  const transactionMatcher = /transaction\\s*(\\(\\s*\\))*\\s*/g;\n  const scriptMatcher = /pub\\s+fun\\s+main\\s*/g;\n\n  const code = stripComments(template)\n\n  if (transactionMatcher.test(code)) {\n    const signers = extractSigners(code);\n    const args = extractTransactionArguments(code);\n    return {\n      type: TRANSACTION,\n      signers: signers.length,\n      args: args,\n    };\n  }\n\n  if (scriptMatcher.test(code)) {\n    const args = extractScriptArguments(code);\n    return {\n      type: SCRIPT,\n      args: args,\n    };\n  }\n\n  if (contractMatcher.test(code)) {\n    const { contractName, args } = extractContractParameters(code);\n    return {\n      type: CONTRACT,\n      signers: 1,\n      args,\n      contractName,\n    };\n  }\n\n  return {\n    type: UNKNOWN,\n  };\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const wrongType = (type) => !type || typeof type != \"string\";\n\nexport const isBasicNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Int\") || type.startsWith(\"UInt\") || type.startsWith(\"Word\");\n};\n\nexport const isFixedNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Fix64\") || type.startsWith(\"UFix64\");\n};\n\nexport const isString = (type) => type === \"String\";\nexport const isCharacter = (type) => type === \"Character\";\nexport const isBoolean = (type) => type === \"Bool\";\nexport const isAddress = (type) => type === \"Address\" || type === \"Address?\";\n\nexport const isBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  let fixedType = type.endsWith(\"?\") ? type.slice(0, -1) : type;\n  return (\n    isBasicNumType(fixedType) ||\n    isString(fixedType) ||\n    isCharacter(fixedType) ||\n    isBoolean(fixedType)\n  );\n};\n\nexport const isArray = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"[\") && clearType.endsWith(\"]\");\n};\n\nexport const isDictionary = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"{\") && clearType.endsWith(\"}\");\n};\n\nexport const isComplexType = (type) => isArray(type) || isDictionary(type);\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport * as fcl from \"@onflow/fcl\";\n\nimport { toFixedValue, withPrefix } from \"./fixer\";\nimport { getTemplateInfo } from \"./parser\";\nimport {\n  isBasicType,\n  isFixedNumType,\n  isAddress,\n  isArray,\n  isDictionary,\n  isComplexType,\n  wrongType,\n  isBasicNumType,\n} from \"./type-checker\";\n\nimport { removeSpaces } from \"./strings\";\n\nconst throwTypeError = (msg) => {\n  throw new Error(\"Type Error: \" + msg);\n};\n\nexport const splitArgs = (pair) => {\n  return pair\n    .split(/(\\w+)\\s*:\\s*([\\w{}[\\]:\\s?]*)/)\n    .filter((item) => item !== \"\")\n    .map((item) => item.replace(/\\s*/g, \"\"));\n};\n\nexport const argType = (pair) => splitArgs(pair)[1];\n\nexport const getDictionaryTypes = (type) => {\n  const match = /{(.*)}/.exec(type);\n  return match[1]\n    .split(/([^:]*):(.*)/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item);\n};\n\nexport const getArrayType = (type) => {\n  const match = /\\[(.*)\\]/.exec(type);\n  return removeSpaces(match[1]);\n};\n\n/**\n * Reports missing arguments.\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportArguments = (found, required, prefix = \"\") => {\n  if (required > found) {\n    const errorMessage = `Incorrect number of arguments: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\n/**\n * Reports missing items.\n * @param {string} itemType - name of the missing item\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportMissing = (itemType = \"items\", found, required, prefix = \"\") => {\n  if (required !== found) {\n    const errorMessage = `Incorrect number of ${itemType}: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\nexport const raw = (type) => type.slice(0, -1);\n\nexport const resolveBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  if (type.includes(\"?\")) {\n    return t.Optional(t[raw(type)]);\n  }\n  return t[type];\n};\n\nexport const resolveType = (type) => {\n\n  if (isComplexType(type)) {\n    switch (true) {\n      case isArray(type): {\n        const arrayType = getArrayType(type);\n        return t.Array(resolveType(arrayType));\n      }\n\n      case isDictionary(type): {\n        const [key, value] = getDictionaryTypes(type);\n        const dictionaryType = { key: resolveType(key), value: resolveType(value) };\n        return t.Dictionary(dictionaryType);\n      }\n\n      default: {\n        return resolveBasicType(type);\n      }\n    }\n  }\n  return resolveBasicType(type);\n};\n\n/**\n * Map single argument to fcl.arg representation.\n * @param {string} type - Cadence value type\n * @param {any} value - actual value\n * @returns any - mapped fcl.arg value\n */\nexport const mapArgument = (type, value) => {\n  const resolvedType = resolveType(type);\n\n  switch (true) {\n    case isBasicType(type): {\n      return fcl.arg(value, resolvedType);\n    }\n\n    case isFixedNumType(type): {\n      // Try to parse value and throw if it fails\n      if (value === null) {\n        return fcl.arg(null, resolvedType);\n      }\n      if (isNaN(parseFloat(value))) {\n        throwTypeError(\"Expected proper value for fixed type\");\n      }\n      return fcl.arg(toFixedValue(value), resolvedType);\n    }\n\n    case isAddress(type): {\n      const prefixedAddress = withPrefix(value);\n      return fcl.arg(prefixedAddress, resolvedType);\n    }\n\n    case isArray(type): {\n      const arrayType = getArrayType(type);\n\n      if (isComplexType(arrayType)) {\n        const mappedValue = value.map((v) => mapArgument(arrayType, v).value);\n        return fcl.arg(mappedValue, resolvedType);\n      }\n\n      const result = fcl.arg(value, resolvedType);\n      return result;\n    }\n\n    case isDictionary(type): {\n      const [keyType,valueType] = getDictionaryTypes(type);\n      const finalValue = [];\n      const keys = Object.keys(value);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        let resolvedValue;\n        if (isComplexType(valueType)) {\n          resolvedValue = mapArgument(valueType, value[key]).value;\n        } else {\n          resolvedValue = value[key];\n        }\n\n        const fixedKey = isBasicNumType(keyType) ? parseInt(key) : key;\n\n        finalValue.push({\n          key: fixedKey,\n          value: resolvedValue,\n        });\n      }\n\n      const result = fcl.arg(finalValue, resolvedType);\n      return result;\n    }\n\n    default: {\n      throw `${type} is not supported`;\n    }\n  }\n};\n\nexport const assertType = (arg) => {\n  return arg.xform.asArgument(arg.value);\n};\n\n/**\n * Map arguments with provided schema.\n * @param {[string]} schema - array of Cadence value types\n * @param {[any]} values - array of passed values\n * @returns [any] - array of mapped fcl.arg values\n */\nexport const mapArguments = (schema = [], values) => {\n  if (values.length < schema.length) {\n    throw new Error(\"Not enough arguments\");\n  }\n  return values.map((value, i) => {\n    const mapped = mapArgument(schema[i], value);\n    assertType(mapped);\n    return mapped;\n  });\n};\n\n/**\n * Map arguments via Cadence template.\n * @param {string} code - Cadence template\n * @param {[any]} values - array of values\n * @returns [any] - array of mapped fcl.arg\n */\nexport const mapValuesToCode = (code, values = []) => {\n  const schema = getTemplateInfo(code).args.map(argType);\n  return mapArguments(schema, values);\n};\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst rawArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nexport const resolveArguments = (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const first = args[0];\n  if (Array.isArray(first)) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return rawArgs(args);\n    }\n  }\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n\nexport const padAddress = (address) => {\n  return \"0x\" + sansPrefix(address).padStart(16, \"0\");\n};\n\nexport const toFixedValue = (val) => parseFloat(val).toFixed(8);\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { resolveArguments } from \"./args\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { config } from \"@onflow/config\";\n\nexport const prepareInteraction = async (props, type) => {\n  const { code, cadence, args, addressMap, limit, processed } = props;\n\n  // allow to pass code via \"cadence\" field simillar to fcl.query/mutate\n  const codeTemplate = code || cadence;\n\n  const ixCode = processed ? codeTemplate : replaceImportAddresses(codeTemplate, addressMap);\n\n\n  const ix = type === \"script\" ? [fcl.script(ixCode)] : [fcl.transaction(ixCode)];\n\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n\n  // Handle execution limit\n  const defaultLimit = await config().get(\"ix.executionLimit\")\n  const fallBackLimit = defaultLimit || 100;\n\n  const ixLimit = limit || fallBackLimit;\n  ix.push(fcl.limit(ixLimit));\n\n  if (type === \"transaction\") {\n    const { proposer, payer, signers = [] } = props;\n    const ixSigners = signers.length === 0 ? [payer] : signers;\n    const ixProposer = proposer || payer;\n\n    ix.push(fcl.payer(payer));\n    ix.push(fcl.proposer(ixProposer));\n    ix.push(fcl.authorizations(ixSigners));\n  }\n\n  return fcl.send(ix);\n};\n\n/**\n * Sends script code for execution.\n * Returns decoded value.\n */\n\nexport const executeScript = async (props) => {\n  const { raw = false } = props;\n  try {\n    const response = await prepareInteraction(props, \"script\");\n\n    // In some cases one might want to have raw output without decoding the response\n    if (raw) {\n      return [response.encodedData, null];\n    }\n\n    const decoded = await fcl.decode(response);\n    return [decoded, null];\n  } catch (e) {\n    return [null, e.message];\n  }\n};\n\nexport const waitForStatus = (statusValue) => {\n  if (typeof statusValue === \"string\") {\n    const status = statusValue.toLowerCase();\n    if (status.includes(\"final\")) {\n      return \"onceFinalized\";\n    }\n\n    if (status.includes(\"exec\")) {\n      return \"onceExecuted\";\n    }\n\n    if (status.includes(\"seal\")) {\n      return \"onceExecuted\";\n    }\n  }\n\n  // wait for transaction to be sealed by default\n  console.log(\n    `⚠️ \\x1b[33mStatus value \\x1b[1m\\x1b[35m\"${statusValue}\"\\x1b[33m\\x1b[2m is not supported. Reverting to \\x1b[32m\"onceSealed\"\\x1b[0m`\n  );\n  return \"onceSealed\";\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n */\nexport const sendTransaction = async (props) => {\n  const { wait = \"seal\" } = props;\n  try {\n    const response = await prepareInteraction(props, \"transaction\");\n    if (wait) {\n      const waitMethod = waitForStatus(wait);\n      const rawResult = await fcl.tx(response)[waitMethod]();\n      const txResult = {\n        txId: response,\n        ...rawResult,\n      };\n      return [txResult, null];\n    }\n    return [response.transactionId, null];\n  } catch (e) {\n    return [null, e.message];\n  }\n};\n\n// TODO: add arguments for \"init\" method into template\nexport const addContractTemplate = `\n    transaction(name: String, code: String) {\n      prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        \n        acct.contracts.add(\n          name: name,\n          code: decoded,\n        )\n      }\n    }\n  `;\nexport const updateContractTemplate = `\n  transaction(name: String, code: String){\n    prepare(acct: AuthAccount){\n      let decoded = code.decodeHex()\n      \n      if acct.contracts.get(name: name) == nil {\n        acct.contracts.add(name: name, code: decoded)\n      } else {\n        acct.contracts.update__experimental(name: name, code: decoded)\n      }\n    }\n  }\n`;\n\n// TODO: add jsdoc\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nexport const deployContract = async (props) => {\n  const {\n    name,\n    to,\n    payer,\n    proposer,\n    code: contractCode,\n    update = false,\n    processed = false,\n    addressMap = {},\n  } = props;\n\n  // Update imprort statement with addresses from addressMap\n  const ixContractCode = processed\n    ? contractCode\n    : replaceImportAddresses(contractCode, addressMap);\n\n  // TODO: Implement arguments for \"init\" method\n  const template = update ? addContractTemplate : updateContractTemplate;\n\n  const hexedCode = hexContract(ixContractCode);\n  const args = [name, hexedCode];\n  // Set roles\n  let ixProposer = to;\n  let ixPayer = to;\n  let ixSigners = [to];\n\n  if (payer) {\n    ixPayer = payer;\n    ixProposer = proposer || payer;\n  }\n\n  return sendTransaction({\n    payer: ixPayer,\n    proposer: ixProposer,\n    signers: ixSigners,\n    code: template,\n    args,\n  });\n};\n\nexport const updateContract = async (props) => {\n  return deployContract({ ...props, update: true });\n};\n"],"names":["DEPLOYED_CONTRACTS","emulator","FlowToken","FungibleToken","testnet","LockedTokens","StakingProxy","FUSD","mainnet","ACCESS_NODES","getEnvironment","async","env","config","get","setEnvironment","networkName","options","network","toLowerCase","Error","port","endpoint","limit","accessNode","put","getPairs","line","split","map","item","replace","filter","length","collect","acc","contract","address","extractImports","code","includes","reduce","missingImports","addressMap","importsList","missing","key","Object","prototype","hasOwnProperty","call","push","report","list","prefix","errorMessage","console","error","reportMissingImports","REGEXP_IMPORT","replaceImportAddresses","byName","match","imp","_","Function","capitalizeFirstLetter","input","first","toUpperCase","slice","underscoreToCamelCase","text","word","i","join","trimAndSplit","trimWith","splitBy","getSplitCharacter","indexOf","collapseSpaces","CONTRACT","TRANSACTION","SCRIPT","generateSchema","argsDefinition","stripComments","extract","keyWord","noComments","target","RegExp","exec","extractSigners","extractScriptArguments","extractTransactionArguments","extractContractName","singleLine","matches","extractContractParameters","noComplex","contractName","args","getTemplateInfo","template","test","signers","type","wrongType","isBasicNumType","startsWith","isArray","clearType","endsWith","isDictionary","isComplexType","splitArgs","pair","argType","getDictionaryTypes","getArrayType","reportArguments","found","required","reportMissing","itemType","resolveBasicType","t","Optional","raw","resolveType","arrayType","Array","value","dictionaryType","Dictionary","mapArgument","resolvedType","fixedType","isString","isCharacter","isBoolean","isBasicType","fcl","arg","isFixedNumType","isNaN","parseFloat","msg","throwTypeError","toFixed","isAddress","prefixedAddress","sansPrefix","mappedValue","v","keyType","valueType","finalValue","keys","resolvedValue","fixedKey","parseInt","mapArguments","schema","values","mapped","xform","asArgument","mapValuesToCode","prepareInteraction","props","cadence","processed","codeTemplate","ixCode","ix","script","transaction","arr","convert","unwrap","rawArgs","resolveArguments","defaultLimit","proposer","payer","ixSigners","ixProposer","authorizations","send","executeScript","response","encodedData","decode","e","message","sendTransaction","wait","waitMethod","statusValue","status","log","waitForStatus","txId","tx","transactionId","deployContract","name","to","contractCode","update","ixContractCode","hexedCode","Buffer","from","toString","ixPayer","updateContract"],"mappings":"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"}