// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: anconprotocol/did_registry.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DIDOwner struct {
	Identity          string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	DidAncon          string `protobuf:"bytes,3,opt,name=did_ancon,json=didAncon,proto3" json:"did_ancon,omitempty"`
	DidKey            string `protobuf:"bytes,4,opt,name=did_key,json=didKey,proto3" json:"did_key,omitempty"`
	DidWeb            string `protobuf:"bytes,5,opt,name=did_web,json=didWeb,proto3" json:"did_web,omitempty"`
	DidWebDeactivated string `protobuf:"bytes,6,opt,name=did_web_deactivated,json=didWebDeactivated,proto3" json:"did_web_deactivated,omitempty"`
	VanityName        string `protobuf:"bytes,7,opt,name=vanity_name,json=vanityName,proto3" json:"vanity_name,omitempty"`
}

func (m *DIDOwner) Reset()         { *m = DIDOwner{} }
func (m *DIDOwner) String() string { return proto.CompactTextString(m) }
func (*DIDOwner) ProtoMessage()    {}
func (*DIDOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4b4c49efbad430, []int{0}
}
func (m *DIDOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DIDOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DIDOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DIDOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DIDOwner.Merge(m, src)
}
func (m *DIDOwner) XXX_Size() int {
	return m.Size()
}
func (m *DIDOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_DIDOwner.DiscardUnknown(m)
}

var xxx_messageInfo_DIDOwner proto.InternalMessageInfo

func (m *DIDOwner) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DIDOwner) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DIDOwner) GetDidAncon() string {
	if m != nil {
		return m.DidAncon
	}
	return ""
}

func (m *DIDOwner) GetDidKey() string {
	if m != nil {
		return m.DidKey
	}
	return ""
}

func (m *DIDOwner) GetDidWeb() string {
	if m != nil {
		return m.DidWeb
	}
	return ""
}

func (m *DIDOwner) GetDidWebDeactivated() string {
	if m != nil {
		return m.DidWebDeactivated
	}
	return ""
}

func (m *DIDOwner) GetVanityName() string {
	if m != nil {
		return m.VanityName
	}
	return ""
}

type Delegate struct {
	Delegate     string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	DelegateType string `protobuf:"bytes,2,opt,name=delegateType,proto3" json:"delegateType,omitempty"`
	Validity     uint64 `protobuf:"varint,3,opt,name=validity,proto3" json:"validity,omitempty"`
	Creator      string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Identity     string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *Delegate) Reset()         { *m = Delegate{} }
func (m *Delegate) String() string { return proto.CompactTextString(m) }
func (*Delegate) ProtoMessage()    {}
func (*Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4b4c49efbad430, []int{1}
}
func (m *Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegate.Merge(m, src)
}
func (m *Delegate) XXX_Size() int {
	return m.Size()
}
func (m *Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_Delegate proto.InternalMessageInfo

func (m *Delegate) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

func (m *Delegate) GetDelegateType() string {
	if m != nil {
		return m.DelegateType
	}
	return ""
}

func (m *Delegate) GetValidity() uint64 {
	if m != nil {
		return m.Validity
	}
	return 0
}

func (m *Delegate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Delegate) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type Change struct {
	Identity       string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Owner          string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	PreviousChange uint64 `protobuf:"varint,3,opt,name=previousChange,proto3" json:"previousChange,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4b4c49efbad430, []int{2}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Change) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Change) GetPreviousChange() uint64 {
	if m != nil {
		return m.PreviousChange
	}
	return 0
}

type Attribute struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Name     []byte `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4b4c49efbad430, []int{3}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Attribute) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Attribute) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*DIDOwner)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.DIDOwner")
	proto.RegisterType((*Delegate)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.Delegate")
	proto.RegisterType((*Change)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.Change")
	proto.RegisterType((*Attribute)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.Attribute")
}

func init() { proto.RegisterFile("anconprotocol/did_registry.proto", fileDescriptor_ff4b4c49efbad430) }

var fileDescriptor_ff4b4c49efbad430 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0x8e, 0x21, 0x3f, 0x97, 0x25, 0x42, 0x62, 0xb9, 0x62, 0x75, 0x08, 0xdf, 0xc9, 0x05, 0xa2,
	0x49, 0x5c, 0x40, 0x45, 0x77, 0x47, 0x28, 0x4e, 0x48, 0xfc, 0x18, 0x24, 0x24, 0x9a, 0x68, 0xed,
	0x1d, 0xf9, 0x16, 0x9c, 0xdd, 0x68, 0x3d, 0xf6, 0xe1, 0xb7, 0xe0, 0x01, 0x78, 0xa0, 0x2b, 0xaf,
	0xa4, 0x42, 0x28, 0xe9, 0x79, 0x06, 0xb4, 0xbb, 0x71, 0x82, 0xaf, 0xa0, 0xb8, 0x6e, 0xbe, 0xf9,
	0x66, 0x67, 0xe6, 0x9b, 0x9d, 0x21, 0x27, 0x5c, 0x65, 0x5a, 0xad, 0x8c, 0x46, 0x9d, 0xe9, 0x22,
	0x16, 0x52, 0x2c, 0x0c, 0xe4, 0xb2, 0x44, 0xd3, 0xcc, 0x9c, 0x97, 0xbe, 0x78, 0x55, 0x40, 0x86,
	0x46, 0x2b, 0x99, 0x7d, 0x90, 0xb9, 0xe2, 0x58, 0x19, 0x28, 0xcf, 0x95, 0xa8, 0x4a, 0x34, 0x12,
	0xca, 0x59, 0x27, 0x41, 0x17, 0x1d, 0x1d, 0xe6, 0x3a, 0xd7, 0x0e, 0xc5, 0xd6, 0xf2, 0x19, 0xa3,
	0x3f, 0x01, 0x39, 0x98, 0x9f, 0xcf, 0xdf, 0x5e, 0x2a, 0x30, 0xf4, 0x88, 0x1c, 0x48, 0x01, 0x0a,
	0x25, 0x36, 0x2c, 0x38, 0x09, 0x9e, 0x8e, 0x93, 0x1d, 0xa6, 0x87, 0x64, 0xa0, 0x6d, 0x10, 0xbb,
	0xe3, 0x08, 0x0f, 0xe8, 0x23, 0x32, 0xb6, 0x6d, 0xba, 0x4a, 0xec, 0xae, 0x7f, 0x22, 0xa4, 0x38,
	0xb5, 0x98, 0x3e, 0x26, 0x23, 0x4b, 0x7e, 0x85, 0x86, 0xf5, 0x2d, 0x75, 0xd6, 0xbf, 0xfa, 0x75,
	0x1c, 0x24, 0x43, 0x21, 0xc5, 0x6b, 0x68, 0x5a, 0xfa, 0x12, 0x52, 0x36, 0xb8, 0x41, 0x7f, 0x82,
	0x94, 0x3e, 0x27, 0x0f, 0xb7, 0xf4, 0x42, 0x00, 0xcf, 0x50, 0xd6, 0x1c, 0x41, 0xb0, 0xe1, 0x3f,
	0xa1, 0x0f, 0x7c, 0xe8, 0x7c, 0x4f, 0xd3, 0x63, 0x72, 0xaf, 0xe6, 0x4a, 0x62, 0xb3, 0x50, 0x7c,
	0x09, 0x6c, 0xe4, 0x5a, 0x22, 0xde, 0xf5, 0x86, 0x2f, 0x21, 0xfa, 0x61, 0x05, 0x43, 0x01, 0x39,
	0x47, 0xb0, 0x82, 0xc5, 0xd6, 0x6e, 0x05, 0xb7, 0x98, 0x46, 0x64, 0xd2, 0xda, 0x1f, 0x9b, 0x15,
	0x6c, 0x75, 0x77, 0x7c, 0xf6, 0x7d, 0xcd, 0x0b, 0x29, 0xec, 0xc0, 0xac, 0xfa, 0x7e, 0xb2, 0xc3,
	0x94, 0x91, 0x51, 0x66, 0x80, 0xa3, 0x36, 0x5e, 0x7d, 0xd2, 0xc2, 0xce, 0x98, 0x07, 0xdd, 0x31,
	0x47, 0x29, 0x19, 0xbe, 0xbc, 0xe0, 0x2a, 0x87, 0x5b, 0x7c, 0xc6, 0x13, 0x72, 0x7f, 0x65, 0xa0,
	0x96, 0xba, 0x2a, 0x7d, 0x8e, 0x6d, 0x4f, 0x37, 0xbc, 0xd1, 0x7b, 0x32, 0x3e, 0x45, 0x34, 0x32,
	0xad, 0xf0, 0xff, 0x65, 0x28, 0xe9, 0xbb, 0x29, 0xda, 0x2a, 0x93, 0xc4, 0xd9, 0xb6, 0x74, 0xcd,
	0x8b, 0xca, 0xe7, 0x9e, 0x24, 0x1e, 0x9c, 0x7d, 0xb9, 0x5a, 0x87, 0xc1, 0xf5, 0x3a, 0x0c, 0x7e,
	0xaf, 0xc3, 0xe0, 0xfb, 0x26, 0xec, 0x5d, 0x6f, 0xc2, 0xde, 0xcf, 0x4d, 0xd8, 0xfb, 0xfc, 0x2e,
	0x97, 0x78, 0x51, 0xa5, 0xb3, 0x4c, 0x2f, 0xe3, 0xfd, 0xf6, 0x4e, 0xf7, 0xeb, 0x3b, 0xdd, 0xef,
	0x6f, 0xec, 0xf6, 0x68, 0xba, 0xbb, 0x80, 0x6f, 0x71, 0xf7, 0x22, 0xb0, 0x59, 0x41, 0x99, 0x0e,
	0x1d, 0x7e, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x68, 0x3a, 0xee, 0x43, 0x2f, 0x03, 0x00, 0x00,
}

func (m *DIDOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DIDOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DIDOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VanityName) > 0 {
		i -= len(m.VanityName)
		copy(dAtA[i:], m.VanityName)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.VanityName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DidWebDeactivated) > 0 {
		i -= len(m.DidWebDeactivated)
		copy(dAtA[i:], m.DidWebDeactivated)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.DidWebDeactivated)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DidWeb) > 0 {
		i -= len(m.DidWeb)
		copy(dAtA[i:], m.DidWeb)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.DidWeb)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DidKey) > 0 {
		i -= len(m.DidKey)
		copy(dAtA[i:], m.DidKey)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.DidKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DidAncon) > 0 {
		i -= len(m.DidAncon)
		copy(dAtA[i:], m.DidAncon)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.DidAncon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Validity != 0 {
		i = encodeVarintDidRegistry(dAtA, i, uint64(m.Validity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DelegateType) > 0 {
		i -= len(m.DelegateType)
		copy(dAtA[i:], m.DelegateType)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.DelegateType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousChange != 0 {
		i = encodeVarintDidRegistry(dAtA, i, uint64(m.PreviousChange))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintDidRegistry(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDidRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovDidRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DIDOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.DidAncon)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.DidKey)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.DidWeb)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.DidWebDeactivated)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.VanityName)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	return n
}

func (m *Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.DelegateType)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	if m.Validity != 0 {
		n += 1 + sovDidRegistry(uint64(m.Validity))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	return n
}

func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	if m.PreviousChange != 0 {
		n += 1 + sovDidRegistry(uint64(m.PreviousChange))
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDidRegistry(uint64(l))
	}
	return n
}

func sovDidRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDidRegistry(x uint64) (n int) {
	return sovDidRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DIDOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DIDOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DIDOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidAncon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidAncon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidWeb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidWeb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidWebDeactivated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidWebDeactivated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VanityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VanityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousChange", wireType)
			}
			m.PreviousChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousChange |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDidRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDidRegistry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDidRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDidRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDidRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDidRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDidRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDidRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDidRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDidRegistry = fmt.Errorf("proto: unexpected end of group")
)
