// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: anconprotocol/royalty.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoyaltyInfo struct {
	UpdateCount          uint64 `protobuf:"varint,1,opt,name=updateCount,proto3" json:"updateCount,omitempty"`
	Receiver             string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	RoyaltyFeePercentage uint64 `protobuf:"varint,3,opt,name=royaltyFeePercentage,proto3" json:"royaltyFeePercentage,omitempty"`
	MetadataUri          string `protobuf:"bytes,4,opt,name=metadataUri,proto3" json:"metadataUri,omitempty"`
	DenomId              string `protobuf:"bytes,5,opt,name=denomId,proto3" json:"denomId,omitempty"`
}

func (m *RoyaltyInfo) Reset()         { *m = RoyaltyInfo{} }
func (m *RoyaltyInfo) String() string { return proto.CompactTextString(m) }
func (*RoyaltyInfo) ProtoMessage()    {}
func (*RoyaltyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e90beb9928d6f4, []int{0}
}
func (m *RoyaltyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyInfo.Merge(m, src)
}
func (m *RoyaltyInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyInfo proto.InternalMessageInfo

func (m *RoyaltyInfo) GetUpdateCount() uint64 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

func (m *RoyaltyInfo) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *RoyaltyInfo) GetRoyaltyFeePercentage() uint64 {
	if m != nil {
		return m.RoyaltyFeePercentage
	}
	return 0
}

func (m *RoyaltyInfo) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *RoyaltyInfo) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func init() {
	proto.RegisterType((*RoyaltyInfo)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.RoyaltyInfo")
}

func init() { proto.RegisterFile("anconprotocol/royalty.proto", fileDescriptor_c5e90beb9928d6f4) }

var fileDescriptor_c5e90beb9928d6f4 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0xef, 0x2b, 0x7f, 0xee, 0x16, 0x75, 0xb0, 0x8a, 0x64, 0x55, 0x4c, 0x5d, 0xda,
	0x48, 0xb0, 0x31, 0x82, 0x40, 0xca, 0x56, 0x05, 0xb1, 0xb0, 0xb9, 0xce, 0x21, 0x18, 0x25, 0x3e,
	0x91, 0x73, 0x82, 0xc8, 0x5d, 0x70, 0x3f, 0xdc, 0x00, 0x63, 0x47, 0x46, 0x94, 0xdc, 0x08, 0xaa,
	0x0b, 0x4d, 0x23, 0xb1, 0xf9, 0x79, 0x8f, 0xfc, 0x1e, 0xeb, 0x31, 0x3f, 0x55, 0x56, 0xa3, 0x2d,
	0x1c, 0x12, 0x6a, 0xcc, 0x42, 0x87, 0xb5, 0xca, 0xa8, 0x5e, 0xf8, 0x20, 0xb8, 0xbc, 0xc9, 0x40,
	0x93, 0x43, 0x6b, 0xf4, 0x9d, 0x49, 0xad, 0xa2, 0xca, 0x41, 0x19, 0xd9, 0xa4, 0x2a, 0xc9, 0x19,
	0x28, 0x17, 0xbd, 0xbb, 0x7d, 0x9a, 0x8c, 0x53, 0x4c, 0xd1, 0x53, 0xb8, 0x39, 0x6d, 0x1b, 0xcf,
	0xde, 0x19, 0x1f, 0xc5, 0xdb, 0x1d, 0x91, 0x7d, 0xc4, 0x60, 0xca, 0x47, 0x55, 0x91, 0x28, 0x82,
	0x6b, 0xac, 0x2c, 0x09, 0x36, 0x65, 0xb3, 0x61, 0xbc, 0x1f, 0x05, 0x13, 0x7e, 0xec, 0x40, 0x83,
	0x79, 0x01, 0x27, 0xfe, 0x4d, 0xd9, 0xec, 0x24, 0xde, 0x71, 0x70, 0xce, 0xc7, 0x3f, 0x0f, 0xbe,
	0x05, 0x58, 0x82, 0xd3, 0x60, 0x49, 0xa5, 0x20, 0xfe, 0xfb, 0x9a, 0x3f, 0x67, 0x9b, 0x8d, 0x39,
	0x90, 0x4a, 0x14, 0xa9, 0x7b, 0x67, 0xc4, 0xd0, 0x57, 0xee, 0x47, 0x81, 0xe0, 0x47, 0x09, 0x58,
	0xcc, 0xa3, 0x44, 0x1c, 0xf8, 0xe9, 0x2f, 0x5e, 0x3d, 0x7f, 0x34, 0x92, 0xad, 0x1b, 0xc9, 0xbe,
	0x1a, 0xc9, 0xde, 0x5a, 0x39, 0x58, 0xb7, 0x72, 0xf0, 0xd9, 0xca, 0xc1, 0xc3, 0x32, 0x35, 0xf4,
	0x54, 0xad, 0x16, 0x1a, 0xf3, 0xb0, 0x93, 0x36, 0xef, 0xac, 0xcd, 0x3b, 0x6d, 0xa1, 0x17, 0x35,
	0xdf, 0x39, 0x7f, 0x0d, 0xfb, 0x7f, 0x40, 0x75, 0x01, 0xe5, 0xea, 0xd0, 0xf3, 0xc5, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd4, 0x83, 0x80, 0x42, 0xa1, 0x01, 0x00, 0x00,
}

func (m *RoyaltyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintRoyalty(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintRoyalty(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x22
	}
	if m.RoyaltyFeePercentage != 0 {
		i = encodeVarintRoyalty(dAtA, i, uint64(m.RoyaltyFeePercentage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintRoyalty(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if m.UpdateCount != 0 {
		i = encodeVarintRoyalty(dAtA, i, uint64(m.UpdateCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoyalty(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoyalty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoyaltyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCount != 0 {
		n += 1 + sovRoyalty(uint64(m.UpdateCount))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovRoyalty(uint64(l))
	}
	if m.RoyaltyFeePercentage != 0 {
		n += 1 + sovRoyalty(uint64(m.RoyaltyFeePercentage))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovRoyalty(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovRoyalty(uint64(l))
	}
	return n
}

func sovRoyalty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoyalty(x uint64) (n int) {
	return sovRoyalty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoyaltyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyalty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCount", wireType)
			}
			m.UpdateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoyalty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyalty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyFeePercentage", wireType)
			}
			m.RoyaltyFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoyaltyFeePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoyalty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyalty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoyalty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyalty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoyalty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyalty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoyalty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoyalty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoyalty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoyalty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoyalty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoyalty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoyalty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoyalty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoyalty = fmt.Errorf("proto: unexpected end of group")
)
