// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: anconprotocol/data_union.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Data Source is a container of links which contains the data source to be offer
type DataSource struct {
	ParentCid        string   `protobuf:"bytes,1,opt,name=parent_cid,json=parentCid,proto3" json:"parent_cid,omitempty"`
	DidIdentityOwner string   `protobuf:"bytes,2,opt,name=did_identity_owner,json=didIdentityOwner,proto3" json:"did_identity_owner,omitempty"`
	Anchors          []string `protobuf:"bytes,3,rep,name=anchors,proto3" json:"anchors,omitempty"`
	Name             string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description      string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Creator          string   `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *DataSource) Reset()         { *m = DataSource{} }
func (m *DataSource) String() string { return proto.CompactTextString(m) }
func (*DataSource) ProtoMessage()    {}
func (*DataSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{0}
}
func (m *DataSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSource.Merge(m, src)
}
func (m *DataSource) XXX_Size() int {
	return m.Size()
}
func (m *DataSource) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSource.DiscardUnknown(m)
}

var xxx_messageInfo_DataSource proto.InternalMessageInfo

func (m *DataSource) GetParentCid() string {
	if m != nil {
		return m.ParentCid
	}
	return ""
}

func (m *DataSource) GetDidIdentityOwner() string {
	if m != nil {
		return m.DidIdentityOwner
	}
	return ""
}

func (m *DataSource) GetAnchors() []string {
	if m != nil {
		return m.Anchors
	}
	return nil
}

func (m *DataSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSource) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DataSource) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Data Union represents a data provider.
// It offers data sources with linkable dags to be available for
// users of Ancon Data Union Marketplace
type DataUnion struct {
	// name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// did identity
	DidIdentity string `protobuf:"bytes,2,opt,name=did_identity,json=didIdentity,proto3" json:"did_identity,omitempty"`
	// is active
	Active  bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *DataUnion) Reset()         { *m = DataUnion{} }
func (m *DataUnion) String() string { return proto.CompactTextString(m) }
func (*DataUnion) ProtoMessage()    {}
func (*DataUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{1}
}
func (m *DataUnion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataUnion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataUnion.Merge(m, src)
}
func (m *DataUnion) XXX_Size() int {
	return m.Size()
}
func (m *DataUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_DataUnion.DiscardUnknown(m)
}

var xxx_messageInfo_DataUnion proto.InternalMessageInfo

func (m *DataUnion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataUnion) GetDidIdentity() string {
	if m != nil {
		return m.DidIdentity
	}
	return ""
}

func (m *DataUnion) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *DataUnion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Anchor connects a CID to an onchain record, in this a data source
type Anchor struct {
	DidIdentityOwner string `protobuf:"bytes,1,opt,name=did_identity_owner,json=didIdentityOwner,proto3" json:"did_identity_owner,omitempty"`
	Link             string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	ParentCid        string `protobuf:"bytes,3,opt,name=parent_cid,json=parentCid,proto3" json:"parent_cid,omitempty"`
	Creator          string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Anchor) Reset()         { *m = Anchor{} }
func (m *Anchor) String() string { return proto.CompactTextString(m) }
func (*Anchor) ProtoMessage()    {}
func (*Anchor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{2}
}
func (m *Anchor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Anchor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Anchor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Anchor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anchor.Merge(m, src)
}
func (m *Anchor) XXX_Size() int {
	return m.Size()
}
func (m *Anchor) XXX_DiscardUnknown() {
	xxx_messageInfo_Anchor.DiscardUnknown(m)
}

var xxx_messageInfo_Anchor proto.InternalMessageInfo

func (m *Anchor) GetDidIdentityOwner() string {
	if m != nil {
		return m.DidIdentityOwner
	}
	return ""
}

func (m *Anchor) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Anchor) GetParentCid() string {
	if m != nil {
		return m.ParentCid
	}
	return ""
}

func (m *Anchor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Pricing contains prices for fixed prices data sources
type Pricing struct {
	DidIdentityOwner string `protobuf:"bytes,1,opt,name=did_identity_owner,json=didIdentityOwner,proto3" json:"did_identity_owner,omitempty"`
	Price            uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	DataSourceRef    uint64 `protobuf:"varint,3,opt,name=data_source_ref,json=dataSourceRef,proto3" json:"data_source_ref,omitempty"`
	Creator          string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Pricing) Reset()         { *m = Pricing{} }
func (m *Pricing) String() string { return proto.CompactTextString(m) }
func (*Pricing) ProtoMessage()    {}
func (*Pricing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{3}
}
func (m *Pricing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pricing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pricing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pricing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pricing.Merge(m, src)
}
func (m *Pricing) XXX_Size() int {
	return m.Size()
}
func (m *Pricing) XXX_DiscardUnknown() {
	xxx_messageInfo_Pricing.DiscardUnknown(m)
}

var xxx_messageInfo_Pricing proto.InternalMessageInfo

func (m *Pricing) GetDidIdentityOwner() string {
	if m != nil {
		return m.DidIdentityOwner
	}
	return ""
}

func (m *Pricing) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Pricing) GetDataSourceRef() uint64 {
	if m != nil {
		return m.DataSourceRef
	}
	return 0
}

func (m *Pricing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgAddDataSource struct {
	DataSource *DataSource `protobuf:"bytes,1,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	Creator    string      `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgAddDataSource) Reset()         { *m = MsgAddDataSource{} }
func (m *MsgAddDataSource) String() string { return proto.CompactTextString(m) }
func (*MsgAddDataSource) ProtoMessage()    {}
func (*MsgAddDataSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{4}
}
func (m *MsgAddDataSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddDataSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddDataSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddDataSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddDataSource.Merge(m, src)
}
func (m *MsgAddDataSource) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddDataSource) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddDataSource.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddDataSource proto.InternalMessageInfo

func (m *MsgAddDataSource) GetDataSource() *DataSource {
	if m != nil {
		return m.DataSource
	}
	return nil
}

func (m *MsgAddDataSource) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgAddDataSourceResponse struct {
	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Cid string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgAddDataSourceResponse) Reset()         { *m = MsgAddDataSourceResponse{} }
func (m *MsgAddDataSourceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddDataSourceResponse) ProtoMessage()    {}
func (*MsgAddDataSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{5}
}
func (m *MsgAddDataSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddDataSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddDataSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddDataSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddDataSourceResponse.Merge(m, src)
}
func (m *MsgAddDataSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddDataSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddDataSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddDataSourceResponse proto.InternalMessageInfo

func (m *MsgAddDataSourceResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MsgAddDataSourceResponse) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgRemoveDataSource struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid     string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgRemoveDataSource) Reset()         { *m = MsgRemoveDataSource{} }
func (m *MsgRemoveDataSource) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataSource) ProtoMessage()    {}
func (*MsgRemoveDataSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{6}
}
func (m *MsgRemoveDataSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataSource.Merge(m, src)
}
func (m *MsgRemoveDataSource) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataSource) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataSource.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataSource proto.InternalMessageInfo

func (m *MsgRemoveDataSource) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveDataSource) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgRemoveDataSourceResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *MsgRemoveDataSourceResponse) Reset()         { *m = MsgRemoveDataSourceResponse{} }
func (m *MsgRemoveDataSourceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataSourceResponse) ProtoMessage()    {}
func (*MsgRemoveDataSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{7}
}
func (m *MsgRemoveDataSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataSourceResponse.Merge(m, src)
}
func (m *MsgRemoveDataSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataSourceResponse proto.InternalMessageInfo

func (m *MsgRemoveDataSourceResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type MsgUpdateDataSource struct {
	Creator     string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid         string   `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Anchors     []uint64 `protobuf:"varint,5,rep,packed,name=anchors,proto3" json:"anchors,omitempty"`
}

func (m *MsgUpdateDataSource) Reset()         { *m = MsgUpdateDataSource{} }
func (m *MsgUpdateDataSource) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataSource) ProtoMessage()    {}
func (*MsgUpdateDataSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{8}
}
func (m *MsgUpdateDataSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataSource.Merge(m, src)
}
func (m *MsgUpdateDataSource) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataSource) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataSource.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataSource proto.InternalMessageInfo

func (m *MsgUpdateDataSource) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDataSource) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgUpdateDataSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateDataSource) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUpdateDataSource) GetAnchors() []uint64 {
	if m != nil {
		return m.Anchors
	}
	return nil
}

type MsgUpdateDataSourceResponse struct {
	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Cid string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgUpdateDataSourceResponse) Reset()         { *m = MsgUpdateDataSourceResponse{} }
func (m *MsgUpdateDataSourceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataSourceResponse) ProtoMessage()    {}
func (*MsgUpdateDataSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{9}
}
func (m *MsgUpdateDataSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataSourceResponse.Merge(m, src)
}
func (m *MsgUpdateDataSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataSourceResponse proto.InternalMessageInfo

func (m *MsgUpdateDataSourceResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MsgUpdateDataSourceResponse) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgAddDataUnion struct {
	DataUnion *DataUnion `protobuf:"bytes,1,opt,name=data_union,json=dataUnion,proto3" json:"data_union,omitempty"`
	Creator   string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgAddDataUnion) Reset()         { *m = MsgAddDataUnion{} }
func (m *MsgAddDataUnion) String() string { return proto.CompactTextString(m) }
func (*MsgAddDataUnion) ProtoMessage()    {}
func (*MsgAddDataUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{10}
}
func (m *MsgAddDataUnion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddDataUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddDataUnion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddDataUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddDataUnion.Merge(m, src)
}
func (m *MsgAddDataUnion) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddDataUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddDataUnion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddDataUnion proto.InternalMessageInfo

func (m *MsgAddDataUnion) GetDataUnion() *DataUnion {
	if m != nil {
		return m.DataUnion
	}
	return nil
}

func (m *MsgAddDataUnion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgAddDataUnionResponse struct {
}

func (m *MsgAddDataUnionResponse) Reset()         { *m = MsgAddDataUnionResponse{} }
func (m *MsgAddDataUnionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddDataUnionResponse) ProtoMessage()    {}
func (*MsgAddDataUnionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{11}
}
func (m *MsgAddDataUnionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddDataUnionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddDataUnionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddDataUnionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddDataUnionResponse.Merge(m, src)
}
func (m *MsgAddDataUnionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddDataUnionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddDataUnionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddDataUnionResponse proto.InternalMessageInfo

type MsgRemoveDataUnion struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid     string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgRemoveDataUnion) Reset()         { *m = MsgRemoveDataUnion{} }
func (m *MsgRemoveDataUnion) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataUnion) ProtoMessage()    {}
func (*MsgRemoveDataUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{12}
}
func (m *MsgRemoveDataUnion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataUnion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataUnion.Merge(m, src)
}
func (m *MsgRemoveDataUnion) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataUnion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataUnion proto.InternalMessageInfo

func (m *MsgRemoveDataUnion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveDataUnion) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgRemoveDataUnionResponse struct {
}

func (m *MsgRemoveDataUnionResponse) Reset()         { *m = MsgRemoveDataUnionResponse{} }
func (m *MsgRemoveDataUnionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataUnionResponse) ProtoMessage()    {}
func (*MsgRemoveDataUnionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{13}
}
func (m *MsgRemoveDataUnionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataUnionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataUnionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataUnionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataUnionResponse.Merge(m, src)
}
func (m *MsgRemoveDataUnionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataUnionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataUnionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataUnionResponse proto.InternalMessageInfo

type MsgUpdateDataUnion struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid     string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgUpdateDataUnion) Reset()         { *m = MsgUpdateDataUnion{} }
func (m *MsgUpdateDataUnion) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataUnion) ProtoMessage()    {}
func (*MsgUpdateDataUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{14}
}
func (m *MsgUpdateDataUnion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataUnion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataUnion.Merge(m, src)
}
func (m *MsgUpdateDataUnion) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataUnion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataUnion proto.InternalMessageInfo

func (m *MsgUpdateDataUnion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDataUnion) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgUpdateDataUnion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MsgUpdateDataUnionResponse struct {
}

func (m *MsgUpdateDataUnionResponse) Reset()         { *m = MsgUpdateDataUnionResponse{} }
func (m *MsgUpdateDataUnionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDataUnionResponse) ProtoMessage()    {}
func (*MsgUpdateDataUnionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c5127372209c222, []int{15}
}
func (m *MsgUpdateDataUnionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDataUnionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDataUnionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDataUnionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDataUnionResponse.Merge(m, src)
}
func (m *MsgUpdateDataUnionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDataUnionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDataUnionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDataUnionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DataSource)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.DataSource")
	proto.RegisterType((*DataUnion)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.DataUnion")
	proto.RegisterType((*Anchor)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.Anchor")
	proto.RegisterType((*Pricing)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.Pricing")
	proto.RegisterType((*MsgAddDataSource)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgAddDataSource")
	proto.RegisterType((*MsgAddDataSourceResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgAddDataSourceResponse")
	proto.RegisterType((*MsgRemoveDataSource)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgRemoveDataSource")
	proto.RegisterType((*MsgRemoveDataSourceResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgRemoveDataSourceResponse")
	proto.RegisterType((*MsgUpdateDataSource)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgUpdateDataSource")
	proto.RegisterType((*MsgUpdateDataSourceResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgUpdateDataSourceResponse")
	proto.RegisterType((*MsgAddDataUnion)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgAddDataUnion")
	proto.RegisterType((*MsgAddDataUnionResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgAddDataUnionResponse")
	proto.RegisterType((*MsgRemoveDataUnion)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgRemoveDataUnion")
	proto.RegisterType((*MsgRemoveDataUnionResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgRemoveDataUnionResponse")
	proto.RegisterType((*MsgUpdateDataUnion)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgUpdateDataUnion")
	proto.RegisterType((*MsgUpdateDataUnionResponse)(nil), "ElectronicSignaturesIndustries.anconprotocol.anconprotocol.MsgUpdateDataUnionResponse")
}

func init() { proto.RegisterFile("anconprotocol/data_union.proto", fileDescriptor_2c5127372209c222) }

var fileDescriptor_2c5127372209c222 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x99, 0xee, 0x52, 0xe8, 0xd3, 0xdf, 0x4f, 0xc8, 0x48, 0xe2, 0x8a, 0xb8, 0xd6, 0x1e,
	0x4c, 0x0f, 0xb6, 0x4d, 0xf4, 0x66, 0x4c, 0x14, 0x04, 0x13, 0x0e, 0x44, 0xb2, 0xc8, 0xc5, 0x4b,
	0x33, 0xcc, 0x0c, 0xcb, 0x08, 0xcc, 0x6c, 0x66, 0xa7, 0x28, 0x5e, 0x7d, 0x01, 0xca, 0xc1, 0x57,
	0xe4, 0x85, 0x23, 0x47, 0x4f, 0xc6, 0xc0, 0x1b, 0x31, 0x3b, 0x6d, 0xf7, 0x4f, 0xe9, 0x6a, 0x8a,
	0xb7, 0x79, 0x9e, 0xed, 0x7e, 0x9f, 0xcf, 0x7c, 0x9f, 0xe7, 0xe9, 0x82, 0x4f, 0x24, 0x55, 0x32,
	0xd2, 0xca, 0x28, 0xaa, 0x8e, 0xba, 0x8c, 0x18, 0xd2, 0xeb, 0x4b, 0xa1, 0x64, 0xc7, 0xe6, 0xf0,
	0xb3, 0x8d, 0x23, 0x4e, 0x8d, 0x56, 0x52, 0xd0, 0x1d, 0x11, 0x4a, 0x62, 0xfa, 0x9a, 0xc7, 0x9b,
	0x92, 0xf5, 0x63, 0xa3, 0x05, 0x8f, 0x3b, 0x85, 0xd7, 0x8b, 0xd1, 0xf2, 0x52, 0xa8, 0x42, 0x65,
	0xa3, 0x6e, 0x72, 0x1a, 0x28, 0x36, 0xbf, 0x23, 0x80, 0x75, 0x62, 0xc8, 0x8e, 0xea, 0x6b, 0xca,
	0xf1, 0x7d, 0x80, 0x88, 0x68, 0x2e, 0x4d, 0x8f, 0x0a, 0xe6, 0xa1, 0x06, 0x6a, 0xd5, 0x82, 0xda,
	0x20, 0xf3, 0x4a, 0x30, 0xfc, 0x18, 0x30, 0x13, 0xac, 0x27, 0x18, 0x97, 0x46, 0x98, 0xd3, 0x9e,
	0xfa, 0x20, 0xb9, 0xf6, 0x2a, 0xf6, 0x67, 0x8b, 0x4c, 0xb0, 0xcd, 0xe1, 0x83, 0x37, 0x49, 0x1e,
	0x7b, 0x30, 0x47, 0x24, 0x3d, 0x50, 0x3a, 0xf6, 0x9c, 0x86, 0xd3, 0xaa, 0x05, 0xa3, 0x10, 0x63,
	0x70, 0x25, 0x39, 0xe6, 0x9e, 0x6b, 0xdf, 0xb4, 0x67, 0xdc, 0x80, 0x3a, 0xe3, 0x31, 0xd5, 0x22,
	0x32, 0x42, 0x49, 0x6f, 0xd6, 0x3e, 0xca, 0xa7, 0x12, 0x3d, 0xaa, 0x39, 0x31, 0x4a, 0x7b, 0x55,
	0xfb, 0x74, 0x14, 0x36, 0x3f, 0x41, 0x2d, 0xb9, 0xc4, 0x6e, 0x62, 0x55, 0x2a, 0x8e, 0x72, 0xe2,
	0x0f, 0xe1, 0xbf, 0x3c, 0xf8, 0x10, 0xb9, 0x9e, 0x43, 0xc6, 0x2b, 0x50, 0x25, 0xd4, 0x88, 0x13,
	0xee, 0x39, 0x0d, 0xd4, 0x9a, 0x5f, 0x73, 0xcf, 0x7f, 0x3e, 0x40, 0xc1, 0x30, 0x97, 0xaf, 0xed,
	0x16, 0x6b, 0x7f, 0x46, 0x50, 0x5d, 0xb5, 0xf7, 0x2a, 0xb1, 0x07, 0x95, 0xd8, 0x83, 0xc1, 0x3d,
	0x12, 0xf2, 0x70, 0xc8, 0x62, 0xcf, 0x63, 0xfe, 0x3b, 0xe3, 0xfe, 0x97, 0x53, 0x7c, 0x41, 0x30,
	0xb7, 0xad, 0x05, 0x15, 0x32, 0x9c, 0x12, 0x63, 0x09, 0x66, 0x23, 0x2d, 0x28, 0xb7, 0x1c, 0x6e,
	0x30, 0x08, 0xf0, 0x23, 0x58, 0xb0, 0xd3, 0x17, 0xdb, 0xb9, 0xe8, 0x69, 0xbe, 0x6f, 0x69, 0xdc,
	0xe0, 0x7f, 0x96, 0x4e, 0x4b, 0xc0, 0xf7, 0xff, 0x40, 0xf4, 0x0d, 0xc1, 0xe2, 0x56, 0x1c, 0xae,
	0x32, 0x96, 0x9b, 0xaf, 0x10, 0xea, 0x39, 0x59, 0xcb, 0x54, 0x7f, 0xf2, 0xba, 0x73, 0xf3, 0xb1,
	0xee, 0x64, 0xe2, 0x01, 0x64, 0x68, 0x79, 0xae, 0x4a, 0x91, 0xeb, 0x39, 0x78, 0xe3, 0x58, 0x01,
	0x8f, 0x23, 0x25, 0x63, 0x8e, 0x6f, 0x41, 0x45, 0x1d, 0x5a, 0xaa, 0xf9, 0xa0, 0xa2, 0x0e, 0xf1,
	0x22, 0x38, 0x49, 0x1f, 0x06, 0x0a, 0xc9, 0xb1, 0xb9, 0x0a, 0xb7, 0xb7, 0xe2, 0x30, 0xe0, 0xc7,
	0xea, 0x84, 0xaf, 0x4f, 0x2c, 0x87, 0x0a, 0xe5, 0x26, 0x48, 0xb4, 0xe1, 0xde, 0x04, 0x89, 0x32,
	0x86, 0xe6, 0x19, 0xb2, 0x25, 0x77, 0x23, 0x46, 0xcc, 0x0d, 0x4b, 0xa6, 0x2b, 0xe1, 0x94, 0xef,
	0x9b, 0x3b, 0x71, 0xdf, 0x46, 0xfb, 0x3b, 0xdb, 0x70, 0x5a, 0x6e, 0xba, 0xbf, 0xcd, 0x17, 0xf6,
	0x0a, 0xe3, 0x48, 0x53, 0xd8, 0x78, 0x86, 0x60, 0x21, 0xeb, 0xc2, 0x60, 0x6f, 0x19, 0x40, 0xf6,
	0x87, 0x37, 0x1c, 0x8d, 0x8d, 0x7f, 0x1d, 0x0d, 0x2b, 0x1d, 0xd4, 0x58, 0x5a, 0xa5, 0x7c, 0x30,
	0xee, 0xc2, 0x9d, 0x31, 0xa4, 0xd1, 0x85, 0x9a, 0x2f, 0x01, 0x17, 0x5a, 0x76, 0x4d, 0xea, 0xaf,
	0x4d, 0x5f, 0x81, 0xe5, 0xeb, 0x0a, 0xa9, 0xfe, 0x5b, 0xab, 0x9f, 0xf9, 0x39, 0xb5, 0xfe, 0xa4,
	0x0e, 0x0f, 0x6b, 0x8e, 0xa9, 0x8e, 0x6a, 0xae, 0xbd, 0x3f, 0xbf, 0xf4, 0xd1, 0xc5, 0xa5, 0x8f,
	0x7e, 0x5d, 0xfa, 0xe8, 0xeb, 0x95, 0x3f, 0x73, 0x71, 0xe5, 0xcf, 0xfc, 0xb8, 0xf2, 0x67, 0xde,
	0x6d, 0x87, 0xc2, 0x1c, 0xf4, 0xf7, 0x3a, 0x54, 0x1d, 0x77, 0x33, 0xfb, 0xdb, 0x99, 0xff, 0xed,
	0xac, 0x01, 0x5d, 0x6b, 0x79, 0x3b, 0xfd, 0x64, 0x7d, 0xec, 0x16, 0x3f, 0x61, 0xe6, 0x34, 0xe2,
	0xf1, 0x5e, 0xd5, 0xc6, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x99, 0x1c, 0x0b, 0x60, 0xe0,
	0x06, 0x00, 0x00,
}

func (m *DataSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Anchors) > 0 {
		for iNdEx := len(m.Anchors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Anchors[iNdEx])
			copy(dAtA[i:], m.Anchors[iNdEx])
			i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Anchors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DidIdentityOwner) > 0 {
		i -= len(m.DidIdentityOwner)
		copy(dAtA[i:], m.DidIdentityOwner)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.DidIdentityOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentCid) > 0 {
		i -= len(m.ParentCid)
		copy(dAtA[i:], m.ParentCid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.ParentCid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataUnion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataUnion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DidIdentity) > 0 {
		i -= len(m.DidIdentity)
		copy(dAtA[i:], m.DidIdentity)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.DidIdentity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Anchor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Anchor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Anchor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentCid) > 0 {
		i -= len(m.ParentCid)
		copy(dAtA[i:], m.ParentCid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.ParentCid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DidIdentityOwner) > 0 {
		i -= len(m.DidIdentityOwner)
		copy(dAtA[i:], m.DidIdentityOwner)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.DidIdentityOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pricing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pricing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pricing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.DataSourceRef != 0 {
		i = encodeVarintDataUnion(dAtA, i, uint64(m.DataSourceRef))
		i--
		dAtA[i] = 0x18
	}
	if m.Price != 0 {
		i = encodeVarintDataUnion(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DidIdentityOwner) > 0 {
		i -= len(m.DidIdentityOwner)
		copy(dAtA[i:], m.DidIdentityOwner)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.DidIdentityOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddDataSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddDataSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddDataSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.DataSource != nil {
		{
			size, err := m.DataSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataUnion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddDataSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddDataSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddDataSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Anchors) > 0 {
		dAtA3 := make([]byte, len(m.Anchors)*10)
		var j2 int
		for _, num := range m.Anchors {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintDataUnion(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddDataUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddDataUnion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddDataUnion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.DataUnion != nil {
		{
			size, err := m.DataUnion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataUnion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddDataUnionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddDataUnionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddDataUnionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataUnion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataUnion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataUnionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataUnionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataUnionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataUnion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataUnion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDataUnion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDataUnionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDataUnionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDataUnionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintDataUnion(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataUnion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentCid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.DidIdentityOwner)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	if len(m.Anchors) > 0 {
		for _, s := range m.Anchors {
			l = len(s)
			n += 1 + l + sovDataUnion(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *DataUnion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.DidIdentity)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *Anchor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidIdentityOwner)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.ParentCid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *Pricing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidIdentityOwner)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovDataUnion(uint64(m.Price))
	}
	if m.DataSourceRef != 0 {
		n += 1 + sovDataUnion(uint64(m.DataSourceRef))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgAddDataSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSource != nil {
		l = m.DataSource.Size()
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgAddDataSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgRemoveDataSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgRemoveDataSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *MsgUpdateDataSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	if len(m.Anchors) > 0 {
		l = 0
		for _, e := range m.Anchors {
			l += sovDataUnion(uint64(e))
		}
		n += 1 + sovDataUnion(uint64(l)) + l
	}
	return n
}

func (m *MsgUpdateDataSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgAddDataUnion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataUnion != nil {
		l = m.DataUnion.Size()
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgAddDataUnionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveDataUnion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgRemoveDataUnionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDataUnion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataUnion(uint64(l))
	}
	return n
}

func (m *MsgUpdateDataUnionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovDataUnion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataUnion(x uint64) (n int) {
	return sovDataUnion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidIdentityOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidIdentityOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anchors = append(m.Anchors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Anchor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Anchor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Anchor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidIdentityOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidIdentityOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pricing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pricing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pricing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidIdentityOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidIdentityOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceRef", wireType)
			}
			m.DataSourceRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSourceRef |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddDataSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddDataSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddDataSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSource == nil {
				m.DataSource = &DataSource{}
			}
			if err := m.DataSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddDataSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddDataSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddDataSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataUnion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Anchors = append(m.Anchors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataUnion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataUnion
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataUnion
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Anchors) == 0 {
					m.Anchors = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataUnion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Anchors = append(m.Anchors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddDataUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddDataUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddDataUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataUnion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataUnion == nil {
				m.DataUnion = &DataUnion{}
			}
			if err := m.DataUnion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddDataUnionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddDataUnionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddDataUnionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataUnionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataUnionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataUnionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataUnion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataUnion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDataUnionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDataUnionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDataUnionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDataUnion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataUnion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataUnion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataUnion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataUnion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataUnion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataUnion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataUnion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataUnion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataUnion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataUnion = fmt.Errorf("proto: unexpected end of group")
)
