// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mintswap/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintswapPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*MintswapPacketData_Data
	Packet isMintswapPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *MintswapPacketData) Reset()         { *m = MintswapPacketData{} }
func (m *MintswapPacketData) String() string { return proto.CompactTextString(m) }
func (*MintswapPacketData) ProtoMessage()    {}
func (*MintswapPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_340b98ccae896e5d, []int{0}
}
func (m *MintswapPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintswapPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintswapPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintswapPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintswapPacketData.Merge(m, src)
}
func (m *MintswapPacketData) XXX_Size() int {
	return m.Size()
}
func (m *MintswapPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MintswapPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_MintswapPacketData proto.InternalMessageInfo

type isMintswapPacketData_Packet interface {
	isMintswapPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MintswapPacketData_Data struct {
	Data *MintSwapData `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (*MintswapPacketData_Data) isMintswapPacketData_Packet() {}

func (m *MintswapPacketData) GetPacket() isMintswapPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *MintswapPacketData) GetData() *MintSwapData {
	if x, ok := m.GetPacket().(*MintswapPacketData_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MintswapPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MintswapPacketData_Data)(nil),
	}
}

type MintSwapData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// metadata
	MetadataRef string `protobuf:"bytes,2,opt,name=metadata_ref,json=metadataRef,proto3" json:"metadata_ref,omitempty"`
	// token name
	TokenName string `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// token symbol/id
	TokenSymbol string `protobuf:"bytes,4,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	// recipient
	Recipient string `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// did owner
	DidOwner string `protobuf:"bytes,6,opt,name=did_owner,json=didOwner,proto3" json:"did_owner,omitempty"`
	Price    uint64 `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *MintSwapData) Reset()         { *m = MintSwapData{} }
func (m *MintSwapData) String() string { return proto.CompactTextString(m) }
func (*MintSwapData) ProtoMessage()    {}
func (*MintSwapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_340b98ccae896e5d, []int{1}
}
func (m *MintSwapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintSwapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintSwapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintSwapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintSwapData.Merge(m, src)
}
func (m *MintSwapData) XXX_Size() int {
	return m.Size()
}
func (m *MintSwapData) XXX_DiscardUnknown() {
	xxx_messageInfo_MintSwapData.DiscardUnknown(m)
}

var xxx_messageInfo_MintSwapData proto.InternalMessageInfo

func (m *MintSwapData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MintSwapData) GetMetadataRef() string {
	if m != nil {
		return m.MetadataRef
	}
	return ""
}

func (m *MintSwapData) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *MintSwapData) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *MintSwapData) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MintSwapData) GetDidOwner() string {
	if m != nil {
		return m.DidOwner
	}
	return ""
}

func (m *MintSwapData) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*MintswapPacketData)(nil), "ElectronicSignaturesIndustries.anconprotocol.mintswap.MintswapPacketData")
	proto.RegisterType((*MintSwapData)(nil), "ElectronicSignaturesIndustries.anconprotocol.mintswap.MintSwapData")
}

func init() { proto.RegisterFile("mintswap/packet.proto", fileDescriptor_340b98ccae896e5d) }

var fileDescriptor_340b98ccae896e5d = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4d, 0x4f, 0xfa, 0x30,
	0x1c, 0xc7, 0xb7, 0xff, 0x1f, 0x26, 0x2b, 0x9c, 0x1a, 0x35, 0x4b, 0xd4, 0x05, 0x39, 0x71, 0x61,
	0x4b, 0x34, 0xbe, 0x01, 0xd4, 0x44, 0x63, 0x7c, 0xc8, 0x38, 0xe9, 0x85, 0x94, 0xf6, 0x07, 0x36,
	0xb0, 0xb6, 0x69, 0x4b, 0x90, 0x77, 0xe1, 0xcb, 0xf2, 0xc8, 0xd1, 0x83, 0x07, 0x03, 0x6f, 0xc4,
	0xac, 0xe3, 0xc1, 0xb3, 0xb7, 0x7d, 0x1f, 0xf6, 0x69, 0xf3, 0x2d, 0x3a, 0xc8, 0xb9, 0xb0, 0x66,
	0x46, 0x54, 0xaa, 0x08, 0x1d, 0x83, 0x4d, 0x94, 0x96, 0x56, 0xe2, 0x8b, 0xeb, 0x09, 0x50, 0xab,
	0xa5, 0xe0, 0xb4, 0xc7, 0x47, 0x82, 0xd8, 0xa9, 0x06, 0x73, 0x2b, 0xd8, 0xd4, 0x58, 0xcd, 0xc1,
	0x24, 0x44, 0x50, 0x29, 0x5c, 0x95, 0xca, 0x49, 0xb2, 0x61, 0xb4, 0xe6, 0x08, 0xdf, 0xaf, 0xbf,
	0x9f, 0x1c, 0xee, 0x8a, 0x58, 0x82, 0x9f, 0x51, 0x85, 0x11, 0x4b, 0x22, 0xbf, 0xe9, 0xb7, 0xeb,
	0x67, 0x97, 0xc9, 0x9f, 0xd8, 0x49, 0x01, 0xee, 0xcd, 0x88, 0x2a, 0x90, 0x37, 0x5e, 0xe6, 0x90,
	0xdd, 0x1a, 0x0a, 0xca, 0x7b, 0xb7, 0xbe, 0x7c, 0xd4, 0xf8, 0x5d, 0xc1, 0x87, 0x28, 0x30, 0x20,
	0x18, 0x68, 0x77, 0x6e, 0x98, 0xad, 0x15, 0x3e, 0x45, 0x8d, 0x1c, 0x2c, 0x29, 0x7e, 0xef, 0x6b,
	0x18, 0x46, 0xff, 0x5c, 0x5a, 0xdf, 0x78, 0x19, 0x0c, 0xf1, 0x09, 0x42, 0x56, 0x8e, 0x41, 0xf4,
	0x05, 0xc9, 0x21, 0xfa, 0xef, 0x0a, 0xa1, 0x73, 0x1e, 0x48, 0x0e, 0x05, 0xa1, 0x8c, 0xcd, 0x3c,
	0x1f, 0xc8, 0x49, 0x54, 0x29, 0x09, 0xce, 0xeb, 0x39, 0x0b, 0x1f, 0xa3, 0x50, 0x03, 0xe5, 0x8a,
	0x83, 0xb0, 0x51, 0xb5, 0x04, 0x6c, 0x0d, 0x7c, 0x84, 0x42, 0xc6, 0x59, 0x5f, 0xce, 0x04, 0xe8,
	0x28, 0x70, 0x69, 0x8d, 0x71, 0xf6, 0x58, 0x68, 0xbc, 0x8f, 0xaa, 0x4a, 0x73, 0x0a, 0xd1, 0x5e,
	0xd3, 0x6f, 0x57, 0xb2, 0x52, 0x74, 0xe1, 0x63, 0x19, 0xfb, 0x8b, 0x65, 0xec, 0x7f, 0x2f, 0x63,
	0xff, 0x7d, 0x15, 0x7b, 0x8b, 0x55, 0xec, 0x7d, 0xae, 0x62, 0xef, 0xe5, 0x6e, 0xc4, 0xed, 0xeb,
	0x74, 0x90, 0x50, 0x99, 0xa7, 0xbb, 0x65, 0x3b, 0xbb, 0x69, 0x3b, 0xbb, 0x6d, 0x53, 0xb7, 0x6d,
	0x67, 0x33, 0x6e, 0xfa, 0x96, 0x6e, 0x9f, 0xdf, 0xce, 0x15, 0x98, 0x41, 0xe0, 0xa2, 0xf3, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x3e, 0xd3, 0xad, 0x17, 0x02, 0x00, 0x00,
}

func (m *MintswapPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintswapPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintswapPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MintswapPacketData_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintswapPacketData_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MintSwapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintSwapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintSwapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DidOwner) > 0 {
		i -= len(m.DidOwner)
		copy(dAtA[i:], m.DidOwner)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DidOwner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataRef) > 0 {
		i -= len(m.MetadataRef)
		copy(dAtA[i:], m.MetadataRef)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.MetadataRef)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintswapPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *MintswapPacketData_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *MintSwapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.MetadataRef)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DidOwner)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPacket(uint64(m.Price))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintswapPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintswapPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintswapPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MintSwapData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &MintswapPacketData_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintSwapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintSwapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintSwapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
